./request/req_wait.c:    if( req->req_any_source_pending ) {
./request/req_wait.c:            status->MPI_TAG    = req->req_status.MPI_TAG;
./request/req_wait.c:            status->MPI_SOURCE = req->req_status.MPI_SOURCE;
./request/req_wait.c:            status->_ucount = req->req_status._ucount;
./request/req_wait.c:            status->_cancelled = req->req_status._cancelled;
./request/req_wait.c:    if (OMPI_REQUEST_GEN == req->req_type) {
./request/req_wait.c:        ompi_grequest_invoke_query(req, &req->req_status);
./request/req_wait.c:        status->MPI_TAG    = req->req_status.MPI_TAG;
./request/req_wait.c:        status->MPI_SOURCE = req->req_status.MPI_SOURCE;
./request/req_wait.c:        status->_ucount    = req->req_status._ucount;
./request/req_wait.c:        status->_cancelled = req->req_status._cancelled;
./request/req_wait.c:    if( req->req_persistent ) {
./request/req_wait.c:        if( req->req_state == OMPI_REQUEST_INACTIVE ) {
./request/req_wait.c:        req->req_state = OMPI_REQUEST_INACTIVE;
./request/req_wait.c:        return req->req_status.MPI_ERROR;
./request/req_wait.c:    if (MPI_SUCCESS != req->req_status.MPI_ERROR) {
./request/req_wait.c:        return req->req_status.MPI_ERROR;
./request/request.h:        if (OPAL_ATOMIC_CMPSET_PTR(&req->req_complete, REQUEST_PENDING, &sync)) {
./request/req_ft.c:    assert( NULL != req->req_mpi_object.comm );
./request/req_ft.c:    req->req_any_source_pending = false;
./request/req_ft.c:    if( OPAL_UNLIKELY(ompi_comm_is_revoked(req->req_mpi_object.comm) && !ompi_request_tag_is_ft(req->req_tag)) ) {
./request/req_ft.c:        /* Do not set req->req_status.MPI_SOURCE */
./request/req_ft.c:        req->req_status.MPI_ERROR  = MPI_ERR_REVOKED;
./request/req_ft.c:                            req->req_mpi_object.comm->c_name, req->req_mpi_object.comm->c_contextid);
./request/req_ft.c:    if((req->req_peer == MPI_PROC_NULL) ||
./request/req_ft.c:       (OMPI_COMM_IS_INTRA(req->req_mpi_object.comm) && req->req_peer == req->req_mpi_object.comm->c_local_group->grp_my_rank)) {
./request/req_ft.c:    if( OPAL_UNLIKELY(MPI_ANY_SOURCE == req->req_peer && !ompi_comm_is_any_source_enabled(req->req_mpi_object.comm)) ) {
./request/req_ft.c:        if( !ompi_request_tag_is_ft(req->req_tag) ) {
./request/req_ft.c:            req->req_status.MPI_ERROR  = MPI_ERR_PROC_FAILED_PENDING;
./request/req_ft.c:                req->req_status.MPI_ERROR  = MPI_ERR_PROC_FAILED;
./request/req_ft.c:            req->req_any_source_pending = true;
./request/req_ft.c:                                req->req_mpi_object.comm->c_name, req->req_mpi_object.comm->c_contextid,
./request/req_ft.c:                                ompi_mpi_errnum_get_string(req->req_status.MPI_ERROR));
./request/req_ft.c:    if( OPAL_UNLIKELY(!ompi_comm_is_proc_active(req->req_mpi_object.comm, req->req_peer,
./request/req_ft.c:                                  OMPI_COMM_IS_INTER(req->req_mpi_object.comm))) ) {
./request/req_ft.c:        req->req_status.MPI_SOURCE = req->req_peer;
./request/req_ft.c:        req->req_status.MPI_ERROR  = MPI_ERR_PROC_FAILED;
./request/req_ft.c:        if( MPI_ANY_SOURCE == req->req_peer ) {
./request/req_ft.c:            req->req_any_source_pending = true;
./request/req_ft.c:                            req->req_mpi_object.comm->c_name, req->req_mpi_object.comm->c_contextid,
./request/req_ft.c:                            req->req_status.MPI_SOURCE,
./request/req_ft.c:                            ompi_mpi_errnum_get_string(req->req_status.MPI_ERROR));
./request/req_ft.c:    if( OPAL_UNLIKELY(ompi_comm_coll_revoked(req->req_mpi_object.comm) &&
./request/req_ft.c:                      ompi_request_tag_is_collective(req->req_tag)) ) {
./request/req_ft.c:        req->req_status.MPI_SOURCE = req->req_peer;
./request/req_ft.c:        req->req_status.MPI_ERROR  = MPI_ERR_PROC_FAILED;
./request/req_ft.c:                            OMPI_NAME_PRINT(OMPI_PROC_MY_NAME), req->req_status.MPI_SOURCE );
./request/req_ft.c:    if( MPI_ERR_PROC_FAILED_PENDING != req->req_status.MPI_ERROR ) {
./request/req_ft.c:        int cancelled = req->req_status._cancelled;
./request/req_ft.c:        mca_pml.pml_dump(req->req_mpi_object.comm, ompi_ftmpi_output_handle);
./request/req_ft.c:        req->req_status._cancelled = cancelled; /* This request is not user cancelled here, it is completed in error */
./request/req_ft.c:    return (MPI_SUCCESS == req->req_status.MPI_ERROR);
./request/grequest.c:    if (greq->greq_cancel.c_cancel != NULL) {
./request/grequest.c:        if (greq->greq_funcs_are_c) {
./request/grequest.c:            rc = greq->greq_cancel.c_cancel(greq->greq_state,
./request/grequest.c:                                            REQUEST_COMPLETE(&greq->greq_base));
./request/grequest.c:            fflag = (ompi_fortran_logical_t) REQUEST_COMPLETE(&greq->greq_base);
./request/grequest.c:            greq->greq_cancel.f_cancel((MPI_Aint*)greq->greq_state, &fflag, &ierr);
./request/grequest.c:    greq->greq_base.req_free     = ompi_grequest_free;
./request/grequest.c:    greq->greq_base.req_cancel   = ompi_grequest_cancel;
./request/grequest.c:    greq->greq_base.req_type = OMPI_REQUEST_GEN;
./request/grequest.c:    greq->greq_base.req_mpi_object.comm = &(ompi_mpi_comm_world.comm);
./request/grequest.c:    greq->greq_base.req_peer = MPI_PROC_NULL;
./request/grequest.c:    greq->greq_base.req_tag = MPI_ANY_TAG;
./request/grequest.c:    greq->greq_base.req_any_source_pending = false;
./request/grequest.c:    greq->greq_funcs_are_c = true;
./request/grequest.c:    if (greq->greq_free.c_free != NULL) {
./request/grequest.c:        if (greq->greq_funcs_are_c) {
./request/grequest.c:            greq->greq_free.c_free(greq->greq_state);
./request/grequest.c:            greq->greq_free.f_free((MPI_Aint*)greq->greq_state, &ierr);
./request/grequest.c:    OMPI_REQUEST_FINI(&greq->greq_base);
./request/grequest.c:    greq->greq_base.req_state = OMPI_REQUEST_ACTIVE;
./request/grequest.c:    greq->greq_state = gstate;
./request/grequest.c:    greq->greq_query.c_query = gquery_fn;
./request/grequest.c:    greq->greq_free.c_free = gfree_fn;
./request/grequest.c:    greq->greq_cancel.c_cancel = gcancel_fn;
./request/grequest.c:    greq->greq_base.req_status = ompi_status_empty;
./request/grequest.c:    *request = &greq->greq_base;
./request/request.c:    req->req_state        = OMPI_REQUEST_INVALID;
./request/request.c:    req->req_complete     = false;
./request/request.c:    req->req_persistent   = false;
./request/request.c:    req->req_free         = NULL;
./request/request.c:    req->req_cancel       = NULL;
./request/request.c:    req->req_complete_cb  = NULL;
./request/request.c:    req->req_complete_cb_data = NULL;
./request/request.c:    req->req_f_to_c_index = MPI_UNDEFINED;
./request/request.c:    req->req_mpi_object.comm = (struct ompi_communicator_t*) NULL;
./request/request.c:    req->req_peer = MPI_PROC_NULL;
./request/request.c:    req->req_tag = MPI_ANY_TAG;
./request/request.c:    req->req_any_source_pending = false;
./request/request.c:    assert( MPI_UNDEFINED == req->req_f_to_c_index );
./request/request.c:    assert( OMPI_REQUEST_INVALID == req->req_state );
./communicator/comm_cid.c:    rc = req->req_status.MPI_ERROR;
./communicator/comm_cid.c:    rc = req->req_status.MPI_ERROR;
./communicator/comm_request.c:                    if (OMPI_SUCCESS != subreq->req_status.MPI_ERROR) {
./communicator/comm_request.c:                        request->super.req_status.MPI_ERROR = subreq->req_status.MPI_ERROR;
./mpi/fortran/mpif-h/test_f.c:        *request = OMPI_INT_2_FINT(c_req->req_f_to_c_index);
./mpi/fortran/mpif-h/wait_f.c:        *request = OMPI_INT_2_FINT(c_req->req_f_to_c_index);
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_RECV;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_pml_complete = true;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_RECV;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_RECV;
./mca/pml/ob1/pml_ob1_irecv.c:                             &(recvreq->req_recv.req_base),
./mca/pml/ob1/pml_ob1_irecv.c:    ompi_request_wait_completion(&recvreq->req_recv.req_base.req_ompi);
./mca/pml/ob1/pml_ob1_irecv.c:        *status = recvreq->req_recv.req_base.req_ompi.req_status;
./mca/pml/ob1/pml_ob1_irecv.c:    rc = recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/ob1/pml_ob1_irecv.c:        ompi_request_cancel(&recvreq->req_recv.req_base.req_ompi);
./mca/pml/ob1/pml_ob1_irecv.c:        ompi_request_wait_completion(&recvreq->req_recv.req_base.req_ompi);
./mca/pml/ob1/pml_ob1_irecv.c:    frag = (mca_pml_ob1_recv_frag_t*) recvreq->req_recv.req_base.req_addr;
./mca/pml/ob1/pml_ob1_irecv.c:    src = recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE;
./mca/pml/ob1/pml_ob1_irecv.c:    tag = recvreq->req_recv.req_base.req_ompi.req_status.MPI_TAG;
./mca/pml/ob1/pml_ob1_irecv.c:    seq = recvreq->req_recv.req_base.req_sequence;
./mca/pml/ob1/pml_ob1_irecv.c:    MCA_PML_BASE_RECV_REQUEST_FINI(&recvreq->req_recv);
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_RECV;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_lock = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_pipeline_depth  = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_bytes_received  = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_rdma_idx = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_pending = false;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_ack_sent = false;
./mca/pml/ob1/pml_ob1_irecv.c:    MCA_PML_BASE_RECV_START(&recvreq->req_recv);
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_sequence = seq;
./mca/pml/ob1/pml_ob1_irecv.c:    proc = mca_pml_ob1_peer_lookup (comm, recvreq->req_recv.req_base.req_peer);
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_proc = proc->ompi_proc;
./mca/pml/ob1/pml_ob1_irecv.c:    frag = (mca_pml_ob1_recv_frag_t*) recvreq->req_recv.req_base.req_addr;
./mca/pml/ob1/pml_ob1_irecv.c:    src = recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE;
./mca/pml/ob1/pml_ob1_irecv.c:    tag = recvreq->req_recv.req_base.req_ompi.req_status.MPI_TAG;
./mca/pml/ob1/pml_ob1_irecv.c:    seq = recvreq->req_recv.req_base.req_sequence;
./mca/pml/ob1/pml_ob1_irecv.c:    MCA_PML_BASE_RECV_REQUEST_FINI(&recvreq->req_recv);
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_RECV;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_lock = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_pipeline_depth  = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_bytes_received  = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_rdma_cnt = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_rdma_idx = 0;
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_pending = false;
./mca/pml/ob1/pml_ob1_irecv.c:    MCA_PML_BASE_RECV_START(&recvreq->req_recv);
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_sequence = seq;
./mca/pml/ob1/pml_ob1_irecv.c:    proc = mca_pml_ob1_peer_lookup (comm, recvreq->req_recv.req_base.req_peer);
./mca/pml/ob1/pml_ob1_irecv.c:    recvreq->req_recv.req_base.req_proc = proc->ompi_proc;
./mca/pml/ob1/pml_ob1_irecv.c:    ompi_request_wait_completion(&(recvreq->req_recv.req_base.req_ompi));
./mca/pml/ob1/pml_ob1_irecv.c:        *status = recvreq->req_recv.req_base.req_ompi.req_status;
./mca/pml/ob1/pml_ob1_irecv.c:    rc = recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/ob1/pml_ob1_irecv.c:        ompi_request_cancel(&recvreq->req_recv.req_base.req_ompi);
./mca/pml/ob1/pml_ob1_irecv.c:        ompi_request_wait_completion(&recvreq->req_recv.req_base.req_ompi);
./mca/pml/ob1/pml_ob1_recvfrag.c:    sendreq->req_recv = hdr->hdr_ack.hdr_dst_req;
./mca/pml/ob1/pml_ob1_recvfrag.c:    if( OPAL_UNLIKELY(NULL == sendreq->req_recv.pval) ) {
./mca/pml/ob1/pml_ob1_recvfrag.c:        OPAL_OUTPUT_VERBOSE((2, ompi_ftmpi_output_handle, "Recvfrag: Received a NACK to the RDV/RGET match to %d on comm %d\n", sendreq->req_send.req_base.req_peer, sendreq->req_send.req_base.req_comm->c_contextid));
./mca/pml/ob1/pml_ob1_recvfrag.c:        if (NULL != sendreq->rdma_frag) {
./mca/pml/ob1/pml_ob1_recvfrag.c:            if (NULL != sendreq->rdma_frag->local_handle) {
./mca/pml/ob1/pml_ob1_recvfrag.c:                mca_bml_base_deregister_mem (sendreq->req_rdma[0].bml_btl, sendreq->rdma_frag->local_handle);
./mca/pml/ob1/pml_ob1_recvfrag.c:                sendreq->rdma_frag->local_handle = NULL;
./mca/pml/ob1/pml_ob1_recvfrag.c:            MCA_PML_OB1_RDMA_FRAG_RETURN(sendreq->rdma_frag);
./mca/pml/ob1/pml_ob1_recvfrag.c:            sendreq->rdma_frag = NULL;
./mca/pml/ob1/pml_ob1_recvfrag.c:        sendreq->req_throttle_sends = true;
./mca/pml/ob1/pml_ob1_recvfrag.c:        size = sendreq->req_send.req_bytes_packed - hdr->hdr_ack.hdr_send_offset;
./mca/pml/ob1/pml_ob1_recvfrag.c:    if (sendreq->req_state != 0) {
./mca/pml/ob1/pml_ob1_recvfrag.c:        OPAL_THREAD_ADD32(&sendreq->req_state, -1);
./mca/pml/ob1/pml_ob1_recvfrag.c:    if ((sendreq->req_send.req_base.req_convertor.flags & CONVERTOR_CUDA) &&
./mca/pml/ob1/pml_ob1_recvfrag.c:        opal_cuda_set_copy_function_async(&sendreq->req_send.req_base.req_convertor, strm);
./mca/pml/ob1/pml_ob1_recvfrag.c:    if (recvreq->req_recv.req_base.req_convertor.flags & CONVERTOR_CUDA_ASYNC) {
./mca/pml/ob1/pml_ob1.c:            if( OMPI_ANY_SOURCE == req->req_peer ) snprintf(cpeer, 64, "%s", "ANY_SOURCE");
./mca/pml/ob1/pml_ob1.c:            else snprintf(cpeer, 64, "%d", req->req_peer);
./mca/pml/ob1/pml_ob1.c:            if( OMPI_ANY_TAG == req->req_tag ) snprintf(ctag, 64, "%s", "ANY_TAG");
./mca/pml/ob1/pml_ob1.c:            else snprintf(ctag, 64, "%d", req->req_tag);
./mca/pml/ob1/pml_ob1.c:                        (void*) req->req_addr, req->req_count,
./mca/pml/ob1/pml_ob1.c:                        (0 != req->req_count ? req->req_datatype->name : "N/A"),
./mca/pml/ob1/pml_ob1.c:                        (void*) req->req_datatype,
./mca/pml/ob1/pml_ob1.c:                        (req->req_pml_complete ? "pml_complete" : ""),
./mca/pml/ob1/pml_ob1.c:                        (req->req_free_called ? "freed" : ""),
./mca/pml/ob1/pml_ob1.c:                        req->req_sequence);
./mca/pml/ob1/pml_ob1_recvreq.c:        recvreq->req_pending = false;
./mca/pml/ob1/pml_ob1_recvreq.c:    assert (false == recvreq->req_recv.req_base.req_free_called);
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_recv.req_base.req_free_called = true;
./mca/pml/ob1/pml_ob1_recvreq.c:                             &(recvreq->req_recv.req_base), PERUSE_RECV );
./mca/pml/ob1/pml_ob1_recvreq.c:    if( true == recvreq->req_recv.req_base.req_pml_complete ) {
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_addr,
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_count,
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_recvreq.c:    OPAL_THREAD_SUB_SIZE_T(&recvreq->req_pipeline_depth, 1);
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, (size_t) rdma_size);
./mca/pml/ob1/pml_ob1_recvreq.c:            recvreq->req_rdma_offset < recvreq->req_send_offset) {
./mca/pml/ob1/pml_ob1_recvreq.c:        recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR = status;
./mca/pml/ob1/pml_ob1_recvreq.c:        bytes_received = recvreq->req_send_offset - recvreq->req_rdma_offset;
./mca/pml/ob1/pml_ob1_recvreq.c:        recvreq->req_rdma_offset = recvreq->req_send_offset; /* prevent posting of more RDMA */
./mca/pml/ob1/pml_ob1_recvreq.c:    ompi_proc_t* proc = (ompi_proc_t*)recvreq->req_recv.req_base.req_proc;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_send_offset = bytes_received;
./mca/pml/ob1/pml_ob1_recvreq.c:        if(opal_convertor_need_buffers(&recvreq->req_recv.req_base.req_convertor) == 0 &&
./mca/pml/ob1/pml_ob1_recvreq.c:            opal_convertor_get_current_pointer( &recvreq->req_recv.req_base.req_convertor, (void**)&(base) );
./mca/pml/ob1/pml_ob1_recvreq.c:                recvreq->req_rdma_cnt = mca_pml_ob1_rdma_btls(bml_endpoint,
./mca/pml/ob1/pml_ob1_recvreq.c:                        base, recvreq->req_recv.req_bytes_packed,
./mca/pml/ob1/pml_ob1_recvreq.c:                        recvreq->req_rdma );
./mca/pml/ob1/pml_ob1_recvreq.c:                recvreq->req_rdma_cnt = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:            if (recvreq->req_rdma_cnt != 0) {
./mca/pml/ob1/pml_ob1_recvreq.c:                recvreq->req_send_offset = hdr->hdr_msg_length;
./mca/pml/ob1/pml_ob1_recvreq.c:                recvreq->req_send_offset = hdr->hdr_msg_length -
./mca/pml/ob1/pml_ob1_recvreq.c:                if(recvreq->req_send_offset < bytes_received)
./mca/pml/ob1/pml_ob1_recvreq.c:                    recvreq->req_send_offset = bytes_received;
./mca/pml/ob1/pml_ob1_recvreq.c:                opal_convertor_set_position(&recvreq->req_recv.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_recvreq.c:                        &recvreq->req_send_offset);
./mca/pml/ob1/pml_ob1_recvreq.c:                recvreq->req_rdma_cnt =
./mca/pml/ob1/pml_ob1_recvreq.c:                            recvreq->req_send_offset - bytes_received,
./mca/pml/ob1/pml_ob1_recvreq.c:                            recvreq->req_rdma);
./mca/pml/ob1/pml_ob1_recvreq.c:        if(recvreq->req_send_offset == hdr->hdr_msg_length)
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_ack_sent = true;
./mca/pml/ob1/pml_ob1_recvreq.c:                                             recvreq, recvreq->req_send_offset, 0,
./mca/pml/ob1/pml_ob1_recvreq.c:                                             recvreq->req_send_offset == bytes_received);
./mca/pml/ob1/pml_ob1_recvreq.c:    ompi_proc_t *proc = (ompi_proc_t *) recvreq->req_recv.req_base.req_proc;
./mca/pml/ob1/pml_ob1_recvreq.c:            size_t skipped_bytes = recvreq->req_send_offset - recvreq->req_rdma_offset;
./mca/pml/ob1/pml_ob1_recvreq.c:            recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR = status;
./mca/pml/ob1/pml_ob1_recvreq.c:            recvreq->req_rdma_offset = recvreq->req_send_offset; /* prevent posting of more RDMA */
./mca/pml/ob1/pml_ob1_recvreq.c:            OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, skipped_bytes);
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, frag->rdma_length);
./mca/pml/ob1/pml_ob1_recvreq.c:        mca_pml_ob1_send_fin (recvreq->req_recv.req_base.req_proc,
./mca/pml/ob1/pml_ob1_recvreq.c:    ompi_proc_t* proc = (ompi_proc_t*)recvreq->req_recv.req_base.req_proc;
./mca/pml/ob1/pml_ob1_recvreq.c:    mca_pml_ob1_rdma_hdr_prepare (hdr, (!recvreq->req_ack_sent) ? MCA_PML_OB1_HDR_TYPE_ACK : 0,
./mca/pml/ob1/pml_ob1_recvreq.c:                                  recvreq->remote_req_send.lval, frag, recvreq, frag->rdma_offset,
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_ack_sent = true;
./mca/pml/ob1/pml_ob1_recvreq.c:                                  &(recvreq->req_recv.req_base), frag->rdma_length,
./mca/pml/ob1/pml_ob1_recvreq.c:    if (bml_btl->btl->btl_register_mem && !frag->local_handle && !recvreq->local_handle) {
./mca/pml/ob1/pml_ob1_recvreq.c:    } else if (recvreq->local_handle) {
./mca/pml/ob1/pml_ob1_recvreq.c:        local_handle = recvreq->local_handle;
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_addr,
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_count,
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_addr,
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_count,
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_recvreq.c:    OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, bytes_received);
./mca/pml/ob1/pml_ob1_recvreq.c:            recvreq->req_rdma_offset < recvreq->req_send_offset) {
./mca/pml/ob1/pml_ob1_recvreq.c:    OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, bytes_received);
./mca/pml/ob1/pml_ob1_recvreq.c:            recvreq->req_rdma_offset < recvreq->req_send_offset) {
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_recv.req_bytes_packed = hdr->hdr_rndv.hdr_msg_length;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_send_offset = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:    if (opal_convertor_need_buffers(&recvreq->req_recv.req_base.req_convertor) == true) {
./mca/pml/ob1/pml_ob1_recvreq.c:    bml_endpoint = mca_bml_base_get_endpoint (recvreq->req_recv.req_base.req_proc);
./mca/pml/ob1/pml_ob1_recvreq.c:        if (recvreq->req_recv.req_base.req_convertor.flags & CONVERTOR_CUDA) {
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->remote_req_send = hdr->hdr_rndv.hdr_src_req;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->rdma_bml = rdma_bml;
./mca/pml/ob1/pml_ob1_recvreq.c:        if (recvreq->req_recv.req_base.req_convertor.flags & CONVERTOR_CUDA) {
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_LOCK(&recvreq->lock);
./mca/pml/ob1/pml_ob1_recvreq.c:        opal_convertor_set_position( &recvreq->req_recv.req_base.req_convertor, &offset);
./mca/pml/ob1/pml_ob1_recvreq.c:        opal_convertor_get_current_pointer (&recvreq->req_recv.req_base.req_convertor, &data_ptr);
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_UNLOCK(&recvreq->lock);
./mca/pml/ob1/pml_ob1_recvreq.c:        mca_bml_base_register_mem (rdma_bml, data_ptr, bytes_remaining, flags, &recvreq->local_handle);
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_LOCK(&recvreq->lock);
./mca/pml/ob1/pml_ob1_recvreq.c:        opal_convertor_set_position( &recvreq->req_recv.req_base.req_convertor, &offset);
./mca/pml/ob1/pml_ob1_recvreq.c:        opal_convertor_get_current_pointer (&recvreq->req_recv.req_base.req_convertor, &frag->local_address);
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_UNLOCK(&recvreq->lock);
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_recv.req_bytes_packed = hdr->hdr_rndv.hdr_msg_length;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->remote_req_send = hdr->hdr_rndv.hdr_src_req;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_rdma_offset = bytes_received;
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_addr,
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_count,
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_addr,
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_count,
./mca/pml/ob1/pml_ob1_recvreq.c:                                   recvreq->req_recv.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, bytes_received);
./mca/pml/ob1/pml_ob1_recvreq.c:       recvreq->req_rdma_offset < recvreq->req_send_offset) {
./mca/pml/ob1/pml_ob1_recvreq.c:    if ((recvreq->req_recv.req_base.req_convertor.flags & CONVERTOR_CUDA) &&
./mca/pml/ob1/pml_ob1_recvreq.c:        opal_cuda_set_copy_function_async(&recvreq->req_recv.req_base.req_convertor, strm);
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_recv.req_bytes_packed = bytes_received;
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_addr,
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_count,
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_addr,
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_count,
./mca/pml/ob1/pml_ob1_recvreq.c:                               recvreq->req_recv.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_bytes_received += bytes_received;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_recv.req_base.req_ompi.req_status.MPI_TAG = hdr->hdr_match.hdr_tag;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE = hdr->hdr_match.hdr_src;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_bytes_received = bytes_packed;
./mca/pml/ob1/pml_ob1_recvreq.c:    recvreq->req_bytes_expected = bytes_packed;
./mca/pml/ob1/pml_ob1_recvreq.c:    int num_tries = recvreq->req_rdma_cnt, num_fail = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:    size_t bytes_remaining = recvreq->req_send_offset -
./mca/pml/ob1/pml_ob1_recvreq.c:        recvreq->req_rdma_offset;
./mca/pml/ob1/pml_ob1_recvreq.c:        for(i = 0; i < recvreq->req_rdma_cnt; i++) {
./mca/pml/ob1/pml_ob1_recvreq.c:            if(recvreq->req_rdma[i].bml_btl != start_bml_btl)
./mca/pml/ob1/pml_ob1_recvreq.c:            if( OPAL_LIKELY(recvreq->req_rdma[i].length) )
./mca/pml/ob1/pml_ob1_recvreq.c:                recvreq->req_rdma_idx = i;
./mca/pml/ob1/pml_ob1_recvreq.c:           recvreq->req_pipeline_depth < mca_pml_ob1.recv_pipeline_depth) {
./mca/pml/ob1/pml_ob1_recvreq.c:                if(false == recvreq->req_pending) {
./mca/pml/ob1/pml_ob1_recvreq.c:                    recvreq->req_pending = true;
./mca/pml/ob1/pml_ob1_recvreq.c:            rdma_idx = recvreq->req_rdma_idx;
./mca/pml/ob1/pml_ob1_recvreq.c:            bml_btl = recvreq->req_rdma[rdma_idx].bml_btl;
./mca/pml/ob1/pml_ob1_recvreq.c:            size = recvreq->req_rdma[rdma_idx].length;
./mca/pml/ob1/pml_ob1_recvreq.c:            if(++recvreq->req_rdma_idx >= recvreq->req_rdma_cnt)
./mca/pml/ob1/pml_ob1_recvreq.c:                recvreq->req_rdma_idx = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:         * recvreq->req_rdma[rdma_idx].btl_reg. If once existed it was due to
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_LOCK(&recvreq->lock);
./mca/pml/ob1/pml_ob1_recvreq.c:        opal_convertor_set_position (&recvreq->req_recv.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_recvreq.c:                                     &recvreq->req_rdma_offset);
./mca/pml/ob1/pml_ob1_recvreq.c:        opal_convertor_get_current_pointer (&recvreq->req_recv.req_base.req_convertor, &data_ptr);
./mca/pml/ob1/pml_ob1_recvreq.c:        OPAL_THREAD_UNLOCK(&recvreq->lock);
./mca/pml/ob1/pml_ob1_recvreq.c:        frag->rdma_offset   = recvreq->req_rdma_offset;
./mca/pml/ob1/pml_ob1_recvreq.c:            recvreq->req_rdma_offset += size;
./mca/pml/ob1/pml_ob1_recvreq.c:            OPAL_THREAD_ADD_SIZE_T(&recvreq->req_pipeline_depth, 1);
./mca/pml/ob1/pml_ob1_recvreq.c:            recvreq->req_rdma[rdma_idx].length -= size;
./mca/pml/ob1/pml_ob1_recvreq.c:    if (req->req_recv.req_base.req_type != MCA_PML_REQUEST_PROBE &&
./mca/pml/ob1/pml_ob1_recvreq.c:        req->req_recv.req_base.req_type != MCA_PML_REQUEST_MPROBE) {
./mca/pml/ob1/pml_ob1_recvreq.c:                                &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/ob1/pml_ob1_recvreq.c:    int tag = req->req_recv.req_base.req_tag;
./mca/pml/ob1/pml_ob1_recvreq.c:    mca_pml_ob1_comm_t* comm = req->req_recv.req_base.req_comm->c_pml_comm;
./mca/pml/ob1/pml_ob1_recvreq.c:            req->req_recv.req_base.req_proc = procp[i]->ompi_proc;
./mca/pml/ob1/pml_ob1_recvreq.c:            req->req_recv.req_base.req_proc = procp[i]->ompi_proc;
./mca/pml/ob1/pml_ob1_recvreq.c:    ompi_communicator_t *comm = req->req_recv.req_base.req_comm;
./mca/pml/ob1/pml_ob1_recvreq.c:    req->req_lock = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:    req->req_pipeline_depth = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:    req->req_bytes_received = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:    req->req_bytes_expected = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:    req->req_rdma_idx = 0;
./mca/pml/ob1/pml_ob1_recvreq.c:    req->req_pending = false;
./mca/pml/ob1/pml_ob1_recvreq.c:    req->req_ack_sent = false;
./mca/pml/ob1/pml_ob1_recvreq.c:    MCA_PML_BASE_RECV_START(&req->req_recv);
./mca/pml/ob1/pml_ob1_recvreq.c:                            &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/ob1/pml_ob1_recvreq.c:    req->req_recv.req_base.req_sequence = ob1_comm->recv_sequence++;
./mca/pml/ob1/pml_ob1_recvreq.c:    if(req->req_recv.req_base.req_peer == OMPI_ANY_SOURCE) {
./mca/pml/ob1/pml_ob1_recvreq.c:            req->req_recv.req_base.req_proc = ompi_proc_local_proc;
./mca/pml/ob1/pml_ob1_recvreq.c:        proc = mca_pml_ob1_peer_lookup (comm, req->req_recv.req_base.req_peer);
./mca/pml/ob1/pml_ob1_recvreq.c:        req->req_recv.req_base.req_proc = proc->ompi_proc;
./mca/pml/ob1/pml_ob1_recvreq.c:                                &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/ob1/pml_ob1_recvreq.c:        if(OPAL_LIKELY(req->req_recv.req_base.req_type != MCA_PML_REQUEST_IPROBE &&
./mca/pml/ob1/pml_ob1_recvreq.c:                       req->req_recv.req_base.req_type != MCA_PML_REQUEST_IMPROBE))
./mca/pml/ob1/pml_ob1_recvreq.c:        req->req_match_received = false;
./mca/pml/ob1/pml_ob1_recvreq.c:                                    &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/ob1/pml_ob1_recvreq.c:                                   req->req_recv.req_base.req_comm,
./mca/pml/ob1/pml_ob1_recvreq.c:                                    &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/ob1/pml_ob1_recvreq.c:            req->req_recv.req_base.req_addr = frag;
./mca/pml/ob1/pml_ob1_isend.c:    sendreq->req_send.req_base.req_pml_complete = true;
./mca/pml/ob1/pml_ob1_isend.c:    sendreq->req_send.req_base.req_proc = dst_proc;
./mca/pml/ob1/pml_ob1_isend.c:    sendreq->rdma_frag = NULL;
./mca/pml/ob1/pml_ob1_isend.c:                             &sendreq->req_send.req_base,
./mca/pml/ob1/pml_ob1_isend.c:        ompi_request_wait_completion(&sendreq->req_send.req_base.req_ompi);
./mca/pml/ob1/pml_ob1_isend.c:        rc = sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/ob1/pml_ob1_start.c:                                                 sendreq->req_send.req_send_mode,
./mca/pml/ob1/pml_ob1_start.c:                } else if (sendreq->req_send.req_bytes_packed != 0) {
./mca/pml/ob1/pml_ob1_start.c:                    opal_convertor_set_position (&sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_recvreq.h:        return OPAL_THREAD_ADD32(&recvreq->req_lock,  1) == 1;
./mca/pml/ob1/pml_ob1_recvreq.h:        return OPAL_THREAD_ADD32(&recvreq->req_lock, -1) == 0;
./mca/pml/ob1/pml_ob1_recvreq.h:                                 &(recvreq->req_recv.req_base), PERUSE_RECV );        \
./mca/pml/ob1/pml_ob1_recvreq.h:        ompi_request_complete( &(recvreq->req_recv.req_base.req_ompi), true );        \
./mca/pml/ob1/pml_ob1_recvreq.h:    MCA_PML_BASE_RECV_REQUEST_FINI(&recvreq->req_recv);
./mca/pml/ob1/pml_ob1_recvreq.h:        mca_bml_base_deregister_mem (recvreq->rdma_bml, recvreq->local_handle);
./mca/pml/ob1/pml_ob1_recvreq.h:        recvreq->local_handle = NULL;
./mca/pml/ob1/pml_ob1_recvreq.h:    if(false == recvreq->req_recv.req_base.req_pml_complete){
./mca/pml/ob1/pml_ob1_recvreq.h:        if(recvreq->req_recv.req_bytes_packed > 0) {
./mca/pml/ob1/pml_ob1_recvreq.h:                    &recvreq->req_recv.req_base, PERUSE_RECV );
./mca/pml/ob1/pml_ob1_recvreq.h:        for(i = 0; i < recvreq->req_rdma_cnt; i++) {
./mca/pml/ob1/pml_ob1_recvreq.h:            struct mca_btl_base_registration_handle_t *handle = recvreq->req_rdma[i].btl_reg;
./mca/pml/ob1/pml_ob1_recvreq.h:            mca_bml_base_btl_t *bml_btl = recvreq->req_rdma[i].bml_btl;
./mca/pml/ob1/pml_ob1_recvreq.h:        recvreq->req_rdma_cnt = 0;
./mca/pml/ob1/pml_ob1_recvreq.h:        if(true == recvreq->req_recv.req_base.req_free_called) {
./mca/pml/ob1/pml_ob1_recvreq.h:            if( MPI_SUCCESS != recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR ) {
./mca/pml/ob1/pml_ob1_recvreq.h:            recvreq->req_recv.req_base.req_pml_complete = true;
./mca/pml/ob1/pml_ob1_recvreq.h:            recvreq->req_recv.req_base.req_ompi.req_status._ucount =
./mca/pml/ob1/pml_ob1_recvreq.h:                recvreq->req_bytes_received;
./mca/pml/ob1/pml_ob1_recvreq.h:            if (recvreq->req_recv.req_bytes_packed > recvreq->req_bytes_expected) {
./mca/pml/ob1/pml_ob1_recvreq.h:                recvreq->req_recv.req_base.req_ompi.req_status._ucount =
./mca/pml/ob1/pml_ob1_recvreq.h:                    recvreq->req_recv.req_bytes_packed;
./mca/pml/ob1/pml_ob1_recvreq.h:                recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR =
./mca/pml/ob1/pml_ob1_recvreq.h:            if (OPAL_UNLIKELY(recvreq->local_handle)) {
./mca/pml/ob1/pml_ob1_recvreq.h:                mca_bml_base_deregister_mem (recvreq->rdma_bml, recvreq->local_handle);
./mca/pml/ob1/pml_ob1_recvreq.h:                recvreq->local_handle = NULL;
./mca/pml/ob1/pml_ob1_recvreq.h:    if(recvreq->req_match_received &&
./mca/pml/ob1/pml_ob1_recvreq.h:            recvreq->req_bytes_received >= recvreq->req_recv.req_bytes_packed &&
./mca/pml/ob1/pml_ob1_recvreq.h:    if( req->req_recv.req_base.req_datatype->super.size | req->req_recv.req_base.req_count ) {
./mca/pml/ob1/pml_ob1_recvreq.h:                req->req_recv.req_base.req_proc->super.proc_convertor,
./mca/pml/ob1/pml_ob1_recvreq.h:                &(req->req_recv.req_base.req_datatype->super),
./mca/pml/ob1/pml_ob1_recvreq.h:                req->req_recv.req_base.req_count,
./mca/pml/ob1/pml_ob1_recvreq.h:                req->req_recv.req_base.req_addr,
./mca/pml/ob1/pml_ob1_recvreq.h:                &req->req_recv.req_base.req_convertor);
./mca/pml/ob1/pml_ob1_recvreq.h:        opal_convertor_get_unpacked_size(&req->req_recv.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_recvreq.h:                                         &req->req_bytes_expected);
./mca/pml/ob1/pml_ob1_recvreq.h:    req->req_recv.req_base.req_ompi.req_status.MPI_SOURCE = hdr->hdr_src;
./mca/pml/ob1/pml_ob1_recvreq.h:    req->req_recv.req_base.req_ompi.req_status.MPI_TAG = hdr->hdr_tag;
./mca/pml/ob1/pml_ob1_recvreq.h:    req->req_match_received = true;
./mca/pml/ob1/pml_ob1_recvreq.h:    if(req->req_recv.req_bytes_packed > 0) {
./mca/pml/ob1/pml_ob1_recvreq.h:        if(MPI_ANY_SOURCE == req->req_recv.req_base.req_peer) {
./mca/pml/ob1/pml_ob1_recvreq.h:                                &req->req_recv.req_base, PERUSE_RECV);
./mca/pml/ob1/pml_ob1_sendreq.h:    return OPAL_THREAD_ADD32(&sendreq->req_lock,  1) == 1;
./mca/pml/ob1/pml_ob1_sendreq.h:    return OPAL_THREAD_ADD32(&sendreq->req_lock, -1) == 0;
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_pending = type;
./mca/pml/ob1/pml_ob1_sendreq.h:        *type = sendreq->req_pending;
./mca/pml/ob1/pml_ob1_sendreq.h:        sendreq->req_pending = MCA_PML_OB1_SEND_PENDING_NONE;
./mca/pml/ob1/pml_ob1_sendreq.h:            sendreq->req_send.req_base.req_proc = proc;                 \
./mca/pml/ob1/pml_ob1_sendreq.h:    for(r = 0; r < sendreq->req_rdma_cnt; r++) {
./mca/pml/ob1/pml_ob1_sendreq.h:        struct mca_btl_base_registration_handle_t *handle = sendreq->req_rdma[r].btl_reg;
./mca/pml/ob1/pml_ob1_sendreq.h:        mca_bml_base_btl_t *bml_btl = sendreq->req_rdma[r].bml_btl;
./mca/pml/ob1/pml_ob1_sendreq.h:            sendreq->req_rdma[r].btl_reg = NULL;
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_rdma_cnt = 0;
./mca/pml/ob1/pml_ob1_sendreq.h:                            &(sendreq->req_send.req_base), PERUSE_SEND);             \
./mca/pml/ob1/pml_ob1_sendreq.h:    if (sendreq->rdma_frag) {
./mca/pml/ob1/pml_ob1_sendreq.h:        MCA_PML_OB1_RDMA_FRAG_RETURN (sendreq->rdma_frag);
./mca/pml/ob1/pml_ob1_sendreq.h:        sendreq->rdma_frag = NULL;
./mca/pml/ob1/pml_ob1_sendreq.h:    if(false == sendreq->req_send.req_base.req_pml_complete) {
./mca/pml/ob1/pml_ob1_sendreq.h:        if(sendreq->req_send.req_bytes_packed > 0) {
./mca/pml/ob1/pml_ob1_sendreq.h:                                     &(sendreq->req_send.req_base), PERUSE_SEND);
./mca/pml/ob1/pml_ob1_sendreq.h:        if (sendreq->req_send.req_send_mode == MCA_PML_BASE_SEND_BUFFERED &&
./mca/pml/ob1/pml_ob1_sendreq.h:            sendreq->req_send.req_addr != sendreq->req_send.req_base.req_addr) {
./mca/pml/ob1/pml_ob1_sendreq.h:        if (!sendreq->req_send.req_base.req_free_called) {
./mca/pml/ob1/pml_ob1_sendreq.h:            sendreq->req_send.req_base.req_pml_complete = true;
./mca/pml/ob1/pml_ob1_sendreq.h:            if( !REQUEST_COMPLETE( &((sendreq->req_send).req_base.req_ompi)) ) {
./mca/pml/ob1/pml_ob1_sendreq.h:                if( MPI_SUCCESS != sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR ) {
./mca/pml/ob1/pml_ob1_sendreq.h:    if(sendreq->req_state == 0 &&
./mca/pml/ob1/pml_ob1_sendreq.h:            sendreq->req_bytes_delivered >= sendreq->req_send.req_bytes_packed
./mca/pml/ob1/pml_ob1_sendreq.h:    size_t size = sendreq->req_send.req_bytes_packed;
./mca/pml/ob1/pml_ob1_sendreq.h:    if (btl->btl_cuda_eager_limit && (sendreq->req_send.req_base.req_convertor.flags & CONVERTOR_CUDA)) {
./mca/pml/ob1/pml_ob1_sendreq.h:        switch(sendreq->req_send.req_send_mode) {
./mca/pml/ob1/pml_ob1_sendreq.h:        if(sendreq->req_send.req_send_mode == MCA_PML_BASE_SEND_BUFFERED) {
./mca/pml/ob1/pml_ob1_sendreq.h:                (opal_convertor_need_buffers(&sendreq->req_send.req_base.req_convertor) == false) {
./mca/pml/ob1/pml_ob1_sendreq.h:            opal_convertor_get_current_pointer( &sendreq->req_send.req_base.req_convertor, (void**)&base );
./mca/pml/ob1/pml_ob1_sendreq.h:            if( 0 != (sendreq->req_rdma_cnt = (uint32_t)mca_pml_ob1_rdma_btls(
./mca/pml/ob1/pml_ob1_sendreq.h:                                                                              sendreq->req_endpoint,
./mca/pml/ob1/pml_ob1_sendreq.h:                                                                              sendreq->req_send.req_bytes_packed,
./mca/pml/ob1/pml_ob1_sendreq.h:                                                                              sendreq->req_rdma))) {
./mca/pml/ob1/pml_ob1_sendreq.h:                                                         sendreq->req_send.req_bytes_packed);
./mca/pml/ob1/pml_ob1_sendreq.h:            if (sendreq->req_send.req_base.req_convertor.flags & CONVERTOR_CUDA) {
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_endpoint = endpoint;
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_state = 0;
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_lock = 0;
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_pipeline_depth = 0;
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_bytes_delivered = 0;
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_pending = MCA_PML_OB1_SEND_PENDING_NONE;
./mca/pml/ob1/pml_ob1_sendreq.h:    sendreq->req_send.req_base.req_sequence = seqn;
./mca/pml/ob1/pml_ob1_sendreq.h:    MCA_PML_BASE_SEND_START( &sendreq->req_send );
./mca/pml/ob1/pml_ob1_sendreq.h:    mca_bml_base_endpoint_t *endpoint = mca_bml_base_get_endpoint (sendreq->req_send.req_base.req_proc);
./mca/pml/ob1/pml_ob1_sendreq.h:    ompi_communicator_t *comm = sendreq->req_send.req_base.req_comm;
./mca/pml/ob1/pml_ob1_sendreq.h:    mca_pml_ob1_comm_proc_t *ob1_proc = mca_pml_ob1_peer_lookup (comm, sendreq->req_send.req_base.req_peer);
./mca/pml/ob1/pml_ob1_progress.c:            endpoint = sendreq->req_endpoint;
./mca/pml/ob1/pml_ob1_cuda.c:    if ((sendreq->req_send.req_base.req_convertor.flags & CONVERTOR_CUDA) &&
./mca/pml/ob1/pml_ob1_cuda.c:        (sendreq->req_send.req_bytes_packed > (bml_btl->btl->btl_cuda_rdma_limit - sizeof(mca_pml_ob1_hdr_t)))) {
./mca/pml/ob1/pml_ob1_cuda.c:    sendreq->req_send.req_base.req_convertor.flags &= ~CONVERTOR_CUDA;
./mca/pml/ob1/pml_ob1_cuda.c:    if (opal_convertor_need_buffers(&sendreq->req_send.req_base.req_convertor) == false) {
./mca/pml/ob1/pml_ob1_cuda.c:        opal_convertor_get_current_pointer( &sendreq->req_send.req_base.req_convertor, (void**)&base );
./mca/pml/ob1/pml_ob1_cuda.c:        sendreq->req_send.req_base.req_convertor.flags |= CONVERTOR_CUDA;
./mca/pml/ob1/pml_ob1_cuda.c:        if( 0 != (sendreq->req_rdma_cnt = (uint32_t)mca_pml_ob1_rdma_cuda_btls(
./mca/pml/ob1/pml_ob1_cuda.c:                                                                           sendreq->req_endpoint,
./mca/pml/ob1/pml_ob1_cuda.c:                                                                           sendreq->req_send.req_bytes_packed,
./mca/pml/ob1/pml_ob1_cuda.c:                                                                           sendreq->req_rdma))) {
./mca/pml/ob1/pml_ob1_cuda.c:                                                     sendreq->req_send.req_bytes_packed);
./mca/pml/ob1/pml_ob1_cuda.c:        sendreq->req_send.req_base.req_convertor.flags |= CONVERTOR_CUDA;
./mca/pml/ob1/pml_ob1_cuda.c:    mca_bml_base_endpoint_t* bml_endpoint = mca_bml_base_get_endpoint (recvreq->req_recv.req_base.req_proc);
./mca/pml/ob1/pml_ob1_cuda.c:    if ((recvreq->req_recv.req_base.req_convertor.flags & CONVERTOR_CUDA) &&
./mca/pml/ob1/pml_ob1_cuda.c:        recvreq->req_recv.req_base.req_convertor.flags &= ~CONVERTOR_CUDA;
./mca/pml/ob1/pml_ob1_cuda.c:        if(opal_convertor_need_buffers(&recvreq->req_recv.req_base.req_convertor) == true) {
./mca/pml/ob1/pml_ob1_cuda.c:            recvreq->req_recv.req_base.req_convertor.flags |= CONVERTOR_CUDA;
./mca/pml/ob1/pml_ob1_cuda.c:            recvreq->req_recv.req_base.req_convertor.flags |= CONVERTOR_CUDA;
./mca/pml/ob1/pml_ob1_sendreq.c:                    &sendreq->req_endpoint->btl_eager, bml_btl->btl);
./mca/pml/ob1/pml_ob1_sendreq.c:    if(false == sendreq->req_send.req_base.req_free_called) {
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->req_send.req_base.req_free_called = true;
./mca/pml/ob1/pml_ob1_sendreq.c:                             &(sendreq->req_send.req_base), PERUSE_SEND );
./mca/pml/ob1/pml_ob1_sendreq.c:        if( true == sendreq->req_send.req_base.req_pml_complete ) {
./mca/pml/ob1/pml_ob1_sendreq.c:                                sendreq->req_send.req_base.req_addr,
./mca/pml/ob1/pml_ob1_sendreq.c:                                sendreq->req_send.req_base.req_count,
./mca/pml/ob1/pml_ob1_sendreq.c:                                sendreq->req_send.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_sendreq.c:    req->req_send.req_base.req_type = MCA_PML_REQUEST_SEND;
./mca/pml/ob1/pml_ob1_sendreq.c:    req->req_send.req_base.req_ompi.req_free = mca_pml_ob1_send_request_free;
./mca/pml/ob1/pml_ob1_sendreq.c:    req->req_send.req_base.req_ompi.req_cancel = mca_pml_ob1_send_request_cancel;
./mca/pml/ob1/pml_ob1_sendreq.c:    req->req_rdma_cnt = 0;
./mca/pml/ob1/pml_ob1_sendreq.c:    req->req_throttle_sends = false;
./mca/pml/ob1/pml_ob1_sendreq.c:    req->rdma_frag = NULL;
./mca/pml/ob1/pml_ob1_sendreq.c:    OBJ_CONSTRUCT(&req->req_send_ranges, opal_list_t);
./mca/pml/ob1/pml_ob1_sendreq.c:    OBJ_CONSTRUCT(&req->req_send_range_lock, opal_mutex_t);
./mca/pml/ob1/pml_ob1_sendreq.c:    OBJ_DESTRUCT(&req->req_send_ranges);
./mca/pml/ob1/pml_ob1_sendreq.c:    OBJ_DESTRUCT(&req->req_send_range_lock);
./mca/pml/ob1/pml_ob1_sendreq.c:    if (req->rdma_frag) {
./mca/pml/ob1/pml_ob1_sendreq.c:        MCA_PML_OB1_RDMA_FRAG_RETURN(req->rdma_frag);
./mca/pml/ob1/pml_ob1_sendreq.c:        req->rdma_frag = NULL;
./mca/pml/ob1/pml_ob1_sendreq.c:    if( sendreq->req_send.req_bytes_packed > 0 ) {
./mca/pml/ob1/pml_ob1_sendreq.c:                                 &(sendreq->req_send.req_base), PERUSE_SEND );
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR =
./mca/pml/ob1/pml_ob1_sendreq.c:        mca_bml_base_btl_array_remove(&sendreq->req_endpoint->btl_eager, btl);
./mca/pml/ob1/pml_ob1_sendreq.c:    if( sendreq->req_send.req_bytes_packed > 0 ) {
./mca/pml/ob1/pml_ob1_sendreq.c:                                 &(sendreq->req_send.req_base), PERUSE_SEND );
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered, req_bytes_delivered);
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_ADD32(&sendreq->req_state, -1);
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR =
./mca/pml/ob1/pml_ob1_sendreq.c:        mca_bml_base_btl_array_remove(&sendreq->req_endpoint->btl_eager, btl);
./mca/pml/ob1/pml_ob1_sendreq.c:        OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered, (size_t) rdma_length);
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR =
./mca/pml/ob1/pml_ob1_sendreq.c:        mca_bml_base_btl_array_remove(&sendreq->req_endpoint->btl_eager, btl);
./mca/pml/ob1/pml_ob1_sendreq.c:        OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered,
./mca/pml/ob1/pml_ob1_sendreq.c:                                sendreq->req_send.req_bytes_packed - sendreq->req_bytes_delivered);
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR =
./mca/pml/ob1/pml_ob1_sendreq.c:        mca_bml_base_btl_array_remove(&sendreq->req_endpoint->btl_eager, btl);
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR =
./mca/pml/ob1/pml_ob1_sendreq.c:        mca_bml_base_btl_array_remove(&sendreq->req_endpoint->btl_eager, btl);
./mca/pml/ob1/pml_ob1_sendreq.c:        req_bytes_delivered = sendreq->req_send.req_bytes_packed - sendreq->req_bytes_delivered;
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_SUB_SIZE_T(&sendreq->req_pipeline_depth, 1);
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered, req_bytes_delivered);
./mca/pml/ob1/pml_ob1_sendreq.c:    if((rc = opal_convertor_pack( &sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        sendreq->req_send.req_base.req_comm->c_my_rank,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        sendreq->req_send.req_base.req_tag,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        sendreq->req_send.req_bytes_packed, sendreq);
./mca/pml/ob1/pml_ob1_sendreq.c:    ob1_hdr_hton(hdr, MCA_PML_OB1_HDR_TYPE_RNDV, sendreq->req_send.req_base.req_proc);
./mca/pml/ob1/pml_ob1_sendreq.c:    iov.iov_base = (IOVBASE_TYPE*)(((unsigned char*)sendreq->req_send.req_addr) + max_data);
./mca/pml/ob1/pml_ob1_sendreq.c:    iov.iov_len = max_data = sendreq->req_send.req_bytes_packed - max_data;
./mca/pml/ob1/pml_ob1_sendreq.c:    if((rc = opal_convertor_pack( &sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:    opal_convertor_prepare_for_send( &sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:                                     sendreq->req_send.req_bytes_packed,
./mca/pml/ob1/pml_ob1_sendreq.c:                                     sendreq->req_send.req_addr );
./mca/pml/ob1/pml_ob1_sendreq.c:    sendreq->req_state = 2;
./mca/pml/ob1/pml_ob1_sendreq.c:                                       sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/ob1/pml_ob1_sendreq.c:                                       sendreq->req_send.req_base.req_comm->c_my_rank,
./mca/pml/ob1/pml_ob1_sendreq.c:                                       sendreq->req_send.req_base.req_tag,
./mca/pml/ob1/pml_ob1_sendreq.c:                                       (uint16_t)sendreq->req_send.req_base.req_sequence);
./mca/pml/ob1/pml_ob1_sendreq.c:        ob1_hdr_hton (&match, MCA_PML_OB1_HDR_TYPE_MATCH, sendreq->req_send.req_base.req_proc);
./mca/pml/ob1/pml_ob1_sendreq.c:        rc = mca_bml_base_sendi( bml_btl, &sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_sendreq.c:        (void)opal_convertor_pack( &sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_sendreq.c:                                   sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/ob1/pml_ob1_sendreq.c:                                   sendreq->req_send.req_base.req_comm->c_my_rank,
./mca/pml/ob1/pml_ob1_sendreq.c:                                   sendreq->req_send.req_base.req_tag,
./mca/pml/ob1/pml_ob1_sendreq.c:                                   (uint16_t)sendreq->req_send.req_base.req_sequence);
./mca/pml/ob1/pml_ob1_sendreq.c:    ob1_hdr_hton(hdr, MCA_PML_OB1_HDR_TYPE_MATCH, sendreq->req_send.req_base.req_proc);
./mca/pml/ob1/pml_ob1_sendreq.c:                              &sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:                                   sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/ob1/pml_ob1_sendreq.c:                                   sendreq->req_send.req_base.req_comm->c_my_rank,
./mca/pml/ob1/pml_ob1_sendreq.c:                                   sendreq->req_send.req_base.req_tag,
./mca/pml/ob1/pml_ob1_sendreq.c:                                   (uint16_t)sendreq->req_send.req_base.req_sequence);
./mca/pml/ob1/pml_ob1_sendreq.c:    ob1_hdr_hton(hdr, MCA_PML_OB1_HDR_TYPE_MATCH, sendreq->req_send.req_base.req_proc);
./mca/pml/ob1/pml_ob1_sendreq.c:    bml_btl = sendreq->req_rdma[0].bml_btl;
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->rdma_frag = NULL;
./mca/pml/ob1/pml_ob1_sendreq.c:    opal_convertor_get_current_pointer (&sendreq->req_send.req_base.req_convertor, &data_ptr);
./mca/pml/ob1/pml_ob1_sendreq.c:    local_handle = sendreq->req_rdma[0].btl_reg;
./mca/pml/ob1/pml_ob1_sendreq.c:    sendreq->rdma_frag = frag;
./mca/pml/ob1/pml_ob1_sendreq.c:                                  sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/ob1/pml_ob1_sendreq.c:                                  sendreq->req_send.req_base.req_comm->c_my_rank,
./mca/pml/ob1/pml_ob1_sendreq.c:                                  sendreq->req_send.req_base.req_tag,
./mca/pml/ob1/pml_ob1_sendreq.c:                                  (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/ob1/pml_ob1_sendreq.c:                                  sendreq->req_send.req_bytes_packed, sendreq,
./mca/pml/ob1/pml_ob1_sendreq.c:    ob1_hdr_hton(hdr, MCA_PML_OB1_HDR_TYPE_RGET, sendreq->req_send.req_base.req_proc);
./mca/pml/ob1/pml_ob1_sendreq.c:    if( sendreq->req_send.req_bytes_packed > 0 ) {
./mca/pml/ob1/pml_ob1_sendreq.c:                                 &(sendreq->req_send.req_base), PERUSE_SEND );
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_sendreq.c:                                  &sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_sendreq.c:                                        sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        sendreq->req_send.req_base.req_comm->c_my_rank,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        sendreq->req_send.req_base.req_tag,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/ob1/pml_ob1_sendreq.c:                                        sendreq->req_send.req_bytes_packed, sendreq);
./mca/pml/ob1/pml_ob1_sendreq.c:    ob1_hdr_hton(hdr, MCA_PML_OB1_HDR_TYPE_RNDV, sendreq->req_send.req_base.req_proc);
./mca/pml/ob1/pml_ob1_sendreq.c:    sendreq->req_state = 2;
./mca/pml/ob1/pml_ob1_sendreq.c:    mca_bml_base_endpoint_t* bml_endpoint = sendreq->req_endpoint;
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_LOCK(&sendreq->req_send_range_lock);
./mca/pml/ob1/pml_ob1_sendreq.c:    opal_list_append(&sendreq->req_send_ranges, (opal_list_item_t*)sr);
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_UNLOCK(&sendreq->req_send_range_lock);
./mca/pml/ob1/pml_ob1_sendreq.c:    item = opal_list_get_first(&sendreq->req_send_ranges);
./mca/pml/ob1/pml_ob1_sendreq.c:    if(opal_list_get_end(&sendreq->req_send_ranges) == item)
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_LOCK(&sendreq->req_send_range_lock);
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_UNLOCK(&sendreq->req_send_range_lock);
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_LOCK(&sendreq->req_send_range_lock);
./mca/pml/ob1/pml_ob1_sendreq.c:    opal_list_remove_item(&sendreq->req_send_ranges, (opal_list_item_t *)range);
./mca/pml/ob1/pml_ob1_sendreq.c:    OPAL_THREAD_UNLOCK(&sendreq->req_send_range_lock);
./mca/pml/ob1/pml_ob1_sendreq.c:    if(true == sendreq->req_throttle_sends &&
./mca/pml/ob1/pml_ob1_sendreq.c:            sendreq->req_pipeline_depth >= mca_pml_ob1.send_pipeline_depth)
./mca/pml/ob1/pml_ob1_sendreq.c:    while(range && (false == sendreq->req_throttle_sends ||
./mca/pml/ob1/pml_ob1_sendreq.c:            sendreq->req_pipeline_depth < mca_pml_ob1.send_pipeline_depth)) {
./mca/pml/ob1/pml_ob1_sendreq.c:            /*TODO : assert(sendreq->req_pending == MCA_PML_OB1_SEND_PENDING_NONE); */
./mca/pml/ob1/pml_ob1_sendreq.c:            if ((sendreq->req_send.req_base.req_convertor.flags & CONVERTOR_CUDA) && (bml_btl->btl->btl_cuda_max_send_size != 0)) {
./mca/pml/ob1/pml_ob1_sendreq.c:        opal_convertor_set_position(&sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_sendreq.c:        mca_bml_base_prepare_src(bml_btl, &sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/ob1/pml_ob1_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/ob1/pml_ob1_sendreq.c:                                      sendreq->req_recv.lval);
./mca/pml/ob1/pml_ob1_sendreq.c:                sendreq->req_send.req_base.req_proc);
./mca/pml/ob1/pml_ob1_sendreq.c:                 &(sendreq->req_send.req_base), size, PERUSE_SEND);
./mca/pml/ob1/pml_ob1_sendreq.c:            OPAL_THREAD_ADD_SIZE_T(&sendreq->req_pipeline_depth, 1);
./mca/pml/ob1/pml_ob1_sendreq.c:            OPAL_THREAD_ADD_SIZE_T(&sendreq->req_pipeline_depth, 1);
./mca/pml/ob1/pml_ob1_sendreq.c:        mca_pml_ob1_send_fin (sendreq->req_send.req_base.req_proc, bml_btl,
./mca/pml/ob1/pml_ob1_sendreq.c:        if (NULL != sendreq->req_recv.pval)
./mca/pml/ob1/pml_ob1_sendreq.c:        mca_pml_ob1_send_fin (sendreq->req_send.req_base.req_proc, bml_btl,
./mca/pml/ob1/pml_ob1_sendreq.c:        OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered, frag->rdma_length);
./mca/pml/ob1/pml_ob1_sendreq.c:        for (size_t i = 0 ; i < sendreq->req_rdma_cnt ; ++i) {
./mca/pml/ob1/pml_ob1_sendreq.c:            if (sendreq->req_rdma[i].bml_btl == frag->rdma_bml) {
./mca/pml/ob1/pml_ob1_sendreq.c:                local_handle = sendreq->req_rdma[i].btl_reg;
./mca/pml/ob1/pml_ob1_sendreq.c:    mca_bml_base_endpoint_t *bml_endpoint = sendreq->req_endpoint;
./mca/pml/ob1/pml_ob1_sendreq.c:        OPAL_THREAD_ADD32(&sendreq->req_state, -1);
./mca/pml/ob1/pml_ob1_sendreq.c:    sendreq->req_recv.pval = hdr->hdr_recv_req.pval;
./mca/pml/ob1/pml_ob1_sendreq.c:    if (NULL == sendreq->rdma_frag) {
./mca/pml/ob1/pml_ob1_sendreq.c:            if(NULL != sendreq->req_recv.pval)
./mca/pml/ob1/pml_ob1_sendreq.c:        frag = sendreq->rdma_frag;
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->rdma_frag = NULL;
./mca/pml/ob1/pml_ob1_sendreq.c:        sendreq->req_state = 0;
./mca/pml/ob1/pml_ob1_sendreq.c:    opal_convertor_get_offset_pointer (&sendreq->req_send.req_base.req_convertor,
./mca/pml/ob1/pml_ob1_iprobe.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_IMPROBE;
./mca/pml/ob1/pml_ob1_iprobe.c:    if( REQUEST_COMPLETE( &(recvreq->req_recv.req_base.req_ompi)) ) {
./mca/pml/ob1/pml_ob1_iprobe.c:            *status = recvreq->req_recv.req_base.req_ompi.req_status;
./mca/pml/ob1/pml_ob1_iprobe.c:        (*message)->peer = recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE;
./mca/pml/ob1/pml_ob1_iprobe.c:        (*message)->count = recvreq->req_recv.req_base.req_ompi.req_status._ucount;
./mca/pml/ob1/pml_ob1_iprobe.c:        rc = recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/ob1/pml_ob1_iprobe.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_MPROBE;
./mca/pml/ob1/pml_ob1_iprobe.c:    ompi_request_wait_completion(&recvreq->req_recv.req_base.req_ompi);
./mca/pml/ob1/pml_ob1_iprobe.c:    rc = recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/ob1/pml_ob1_iprobe.c:        *status = recvreq->req_recv.req_base.req_ompi.req_status;
./mca/pml/ob1/pml_ob1_iprobe.c:        (*message)->peer = recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE;
./mca/pml/ob1/pml_ob1_iprobe.c:        (*message)->count = recvreq->req_recv.req_base.req_ompi.req_status._ucount;
./mca/pml/bfo/pml_bfo_sendreq.c:                    &sendreq->req_endpoint->btl_eager, bml_btl->btl);
./mca/pml/bfo/pml_bfo_sendreq.c:    if( false == sendreq->req_send.req_base.req_free_called ) {
./mca/pml/bfo/pml_bfo_sendreq.c:        sendreq->req_send.req_base.req_free_called = true;
./mca/pml/bfo/pml_bfo_sendreq.c:                                 &(sendreq->req_send.req_base), PERUSE_SEND );
./mca/pml/bfo/pml_bfo_sendreq.c:        if( true == sendreq->req_send.req_base.req_pml_complete ) {
./mca/pml/bfo/pml_bfo_sendreq.c:                                sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                                sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                                sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:    req->req_send.req_base.req_type = MCA_PML_REQUEST_SEND;
./mca/pml/bfo/pml_bfo_sendreq.c:    req->req_send.req_base.req_ompi.req_free = mca_pml_bfo_send_request_free;
./mca/pml/bfo/pml_bfo_sendreq.c:    req->req_send.req_base.req_ompi.req_cancel = mca_pml_bfo_send_request_cancel;
./mca/pml/bfo/pml_bfo_sendreq.c:    req->req_rdma_cnt = 0;
./mca/pml/bfo/pml_bfo_sendreq.c:    req->req_throttle_sends = false;
./mca/pml/bfo/pml_bfo_sendreq.c:    OBJ_CONSTRUCT(&req->req_send_ranges, opal_list_t);
./mca/pml/bfo/pml_bfo_sendreq.c:    OBJ_CONSTRUCT(&req->req_send_range_lock, opal_mutex_t);
./mca/pml/bfo/pml_bfo_sendreq.c:    OBJ_DESTRUCT(&req->req_send_ranges);
./mca/pml/bfo/pml_bfo_sendreq.c:    OBJ_DESTRUCT(&req->req_send_range_lock);
./mca/pml/bfo/pml_bfo_sendreq.c:    if( sendreq->req_send.req_bytes_packed > 0 ) {
./mca/pml/bfo/pml_bfo_sendreq.c:                                 &(sendreq->req_send.req_base), PERUSE_SEND );
./mca/pml/bfo/pml_bfo_sendreq.c:    if( sendreq->req_send.req_bytes_packed > 0 ) {
./mca/pml/bfo/pml_bfo_sendreq.c:                                 &(sendreq->req_send.req_base), PERUSE_SEND );
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered, req_bytes_delivered);
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_ADD32(&sendreq->req_state, -1);
./mca/pml/bfo/pml_bfo_sendreq.c:    sendreq->req_events--;
./mca/pml/bfo/pml_bfo_sendreq.c:        OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered, req_bytes_delivered);
./mca/pml/bfo/pml_bfo_sendreq.c:    sendreq->req_events--;
./mca/pml/bfo/pml_bfo_sendreq.c:        sendreq->req_error++;
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_SUB_SIZE_T(&sendreq->req_pipeline_depth, 1);
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered, req_bytes_delivered);
./mca/pml/bfo/pml_bfo_sendreq.c:    if((rc = opal_convertor_pack( &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_ctx = sendreq->req_send.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_src = sendreq->req_send.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_tag = sendreq->req_send.req_base.req_tag;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_rndv.hdr_msg_length = sendreq->req_send.req_bytes_packed;
./mca/pml/bfo/pml_bfo_sendreq.c:                 sendreq->req_send.req_base.req_proc);
./mca/pml/bfo/pml_bfo_sendreq.c:    iov.iov_base = (IOVBASE_TYPE*)(((unsigned char*)sendreq->req_send.req_addr) + max_data);
./mca/pml/bfo/pml_bfo_sendreq.c:    iov.iov_len = max_data = sendreq->req_send.req_bytes_packed - max_data;
./mca/pml/bfo/pml_bfo_sendreq.c:    if((rc = opal_convertor_pack( &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:    opal_convertor_prepare_for_send( &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:                                     sendreq->req_send.req_bytes_packed,
./mca/pml/bfo/pml_bfo_sendreq.c:                                     sendreq->req_send.req_addr );
./mca/pml/bfo/pml_bfo_sendreq.c:    sendreq->req_state = 2;
./mca/pml/bfo/pml_bfo_sendreq.c:            sendreq->req_events++;
./mca/pml/bfo/pml_bfo_sendreq.c:        match.hdr_ctx = sendreq->req_send.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_sendreq.c:        match.hdr_src = sendreq->req_send.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_sendreq.c:        match.hdr_tag = sendreq->req_send.req_base.req_tag;
./mca/pml/bfo/pml_bfo_sendreq.c:        match.hdr_seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_sendreq.c:                     sendreq->req_send.req_base.req_proc);
./mca/pml/bfo/pml_bfo_sendreq.c:        rc = mca_bml_base_sendi( bml_btl, &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:                des->des_cbdata = sendreq->req_endpoint;
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:        (void)opal_convertor_pack( &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_ctx = sendreq->req_send.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_src = sendreq->req_send.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_tag = sendreq->req_send.req_base.req_tag;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_sendreq.c:                 sendreq->req_send.req_base.req_proc);
./mca/pml/bfo/pml_bfo_sendreq.c:                              &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_ctx = sendreq->req_send.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_src = sendreq->req_send.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_tag = sendreq->req_send.req_base.req_tag;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_sendreq.c:                 sendreq->req_send.req_base.req_proc);
./mca/pml/bfo/pml_bfo_sendreq.c:    bml_btl = sendreq->req_rdma[0].bml_btl;
./mca/pml/bfo/pml_bfo_sendreq.c:    if((sendreq->req_rdma_cnt == 1) && (bml_btl->btl_flags & (MCA_BTL_FLAGS_GET | MCA_BTL_FLAGS_CUDA_GET))) {
./mca/pml/bfo/pml_bfo_sendreq.c:        mca_mpool_base_registration_t* reg = sendreq->req_rdma[0].btl_reg;
./mca/pml/bfo/pml_bfo_sendreq.c:        size_t old_position = sendreq->req_send.req_base.req_convertor.bConverted;
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:                                  &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:            opal_convertor_set_position(&sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:            opal_convertor_set_position( &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_match.hdr_ctx = sendreq->req_send.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_match.hdr_src = sendreq->req_send.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_match.hdr_tag = sendreq->req_send.req_base.req_tag;
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_match.hdr_seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_rndv.hdr_msg_length = sendreq->req_send.req_bytes_packed;
./mca/pml/bfo/pml_bfo_sendreq.c:                     sendreq->req_send.req_base.req_proc);
./mca/pml/bfo/pml_bfo_sendreq.c:        if( sendreq->req_send.req_bytes_packed > 0 ) {
./mca/pml/bfo/pml_bfo_sendreq.c:                                     &(sendreq->req_send.req_base), PERUSE_SEND );
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_match.hdr_ctx = sendreq->req_send.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_match.hdr_src = sendreq->req_send.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_match.hdr_tag = sendreq->req_send.req_base.req_tag;
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_match.hdr_seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_rndv.hdr_msg_length = sendreq->req_send.req_bytes_packed;
./mca/pml/bfo/pml_bfo_sendreq.c:                     sendreq->req_send.req_base.req_proc);
./mca/pml/bfo/pml_bfo_sendreq.c:        sendreq->req_state = 2;
./mca/pml/bfo/pml_bfo_sendreq.c:                sendreq->req_events++;
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:                                  &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_ctx = sendreq->req_send.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_src = sendreq->req_send.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_tag = sendreq->req_send.req_base.req_tag;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_match.hdr_seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_sendreq.c:    hdr->hdr_rndv.hdr_msg_length = sendreq->req_send.req_bytes_packed;
./mca/pml/bfo/pml_bfo_sendreq.c:            sendreq->req_send.req_base.req_proc);
./mca/pml/bfo/pml_bfo_sendreq.c:    sendreq->req_state = 2;
./mca/pml/bfo/pml_bfo_sendreq.c:            sendreq->req_events++;
./mca/pml/bfo/pml_bfo_sendreq.c:    mca_bml_base_endpoint_t* bml_endpoint = sendreq->req_endpoint;
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_LOCK(&sendreq->req_send_range_lock);
./mca/pml/bfo/pml_bfo_sendreq.c:    opal_list_append(&sendreq->req_send_ranges, (opal_list_item_t*)sr);
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_UNLOCK(&sendreq->req_send_range_lock);
./mca/pml/bfo/pml_bfo_sendreq.c:    item = opal_list_get_first(&sendreq->req_send_ranges);
./mca/pml/bfo/pml_bfo_sendreq.c:    if(opal_list_get_end(&sendreq->req_send_ranges) == item)
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_LOCK(&sendreq->req_send_range_lock);
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_UNLOCK(&sendreq->req_send_range_lock);
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_LOCK(&sendreq->req_send_range_lock);
./mca/pml/bfo/pml_bfo_sendreq.c:    opal_list_remove_item(&sendreq->req_send_ranges, (opal_list_item_t *)range);
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_UNLOCK(&sendreq->req_send_range_lock);
./mca/pml/bfo/pml_bfo_sendreq.c:    if(true == sendreq->req_throttle_sends &&
./mca/pml/bfo/pml_bfo_sendreq.c:            sendreq->req_pipeline_depth >= mca_pml_bfo.send_pipeline_depth)
./mca/pml/bfo/pml_bfo_sendreq.c:    while(range && (false == sendreq->req_throttle_sends ||
./mca/pml/bfo/pml_bfo_sendreq.c:            sendreq->req_pipeline_depth < mca_pml_bfo.send_pipeline_depth)) {
./mca/pml/bfo/pml_bfo_sendreq.c:            assert(sendreq->req_pending == MCA_PML_BFO_SEND_PENDING_NONE);
./mca/pml/bfo/pml_bfo_sendreq.c:        opal_convertor_set_position(&sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:                                 &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_addr,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_count,
./mca/pml/bfo/pml_bfo_sendreq.c:                            sendreq->req_send.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_sendreq.c:        hdr->hdr_dst_req = sendreq->req_recv;
./mca/pml/bfo/pml_bfo_sendreq.c:                sendreq->req_send.req_base.req_proc);
./mca/pml/bfo/pml_bfo_sendreq.c:                 &(sendreq->req_send.req_base), size, PERUSE_SEND);
./mca/pml/bfo/pml_bfo_sendreq.c:            OPAL_THREAD_ADD_SIZE_T(&sendreq->req_pipeline_depth, 1);
./mca/pml/bfo/pml_bfo_sendreq.c:                sendreq->req_events++;
./mca/pml/bfo/pml_bfo_sendreq.c:        sendreq->req_error++;
./mca/pml/bfo/pml_bfo_sendreq.c:    sendreq->req_events--;
./mca/pml/bfo/pml_bfo_sendreq.c:    mca_pml_bfo_send_fin(sendreq->req_send.req_base.req_proc,
./mca/pml/bfo/pml_bfo_sendreq.c:                         des->order, 0, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_sendreq.c:                         sendreq->req_restartseq, sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_sendreq.c:                         sendreq->req_send.req_base.req_comm->c_my_rank);
./mca/pml/bfo/pml_bfo_sendreq.c:    OPAL_THREAD_ADD_SIZE_T(&sendreq->req_bytes_delivered, frag->rdma_length);
./mca/pml/bfo/pml_bfo_sendreq.c:            mca_pml_bfo_send_fin(sendreq->req_send.req_base.req_proc,
./mca/pml/bfo/pml_bfo_sendreq.c:                    MCA_BTL_NO_ORDER, 1, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_sendreq.c:                    sendreq->req_restartseq, sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_sendreq.c:                    sendreq->req_send.req_base.req_comm->c_my_rank);
./mca/pml/bfo/pml_bfo_sendreq.c:            if(NULL != sendreq->req_recv.pval)
./mca/pml/bfo/pml_bfo_sendreq.c:    mca_bml_base_endpoint_t *bml_endpoint = sendreq->req_endpoint;
./mca/pml/bfo/pml_bfo_sendreq.c:        OPAL_THREAD_ADD32(&sendreq->req_state, -1);
./mca/pml/bfo/pml_bfo_sendreq.c:    sendreq->req_recv = hdr->hdr_dst_req; /* only needed once, but it is OK */
./mca/pml/bfo/pml_bfo_sendreq.c:        if ((sendreq->req_send.req_base.req_proc->super.proc_arch & OPAL_ARCH_ISBIGENDIAN) !=
./mca/pml/bfo/pml_bfo_sendreq.c:    for(i=0; i<sendreq->req_rdma_cnt; i++) {
./mca/pml/bfo/pml_bfo_sendreq.c:       if(sendreq->req_rdma[i].bml_btl == frag->rdma_bml) {
./mca/pml/bfo/pml_bfo_sendreq.c:           frag->reg = sendreq->req_rdma[i].btl_reg;
./mca/pml/bfo/pml_bfo_sendreq.c:    opal_convertor_clone_with_position(&sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_recvreq.h:        return OPAL_THREAD_ADD32(&recvreq->req_lock,  1) == 1;
./mca/pml/bfo/pml_bfo_recvreq.h:        return OPAL_THREAD_ADD32(&recvreq->req_lock, -1) == 0;
./mca/pml/bfo/pml_bfo_recvreq.h:                                &(recvreq->req_recv.req_base), PERUSE_RECV );         \
./mca/pml/bfo/pml_bfo_recvreq.h:        ompi_request_complete( &(recvreq->req_recv.req_base.req_ompi), true );        \
./mca/pml/bfo/pml_bfo_recvreq.h:    if(false == recvreq->req_recv.req_base.req_pml_complete) {
./mca/pml/bfo/pml_bfo_recvreq.h:        if(recvreq->req_recv.req_bytes_packed > 0) {
./mca/pml/bfo/pml_bfo_recvreq.h:                    &recvreq->req_recv.req_base, PERUSE_RECV );
./mca/pml/bfo/pml_bfo_recvreq.h:        for(i = 0; i < recvreq->req_rdma_cnt; i++) {
./mca/pml/bfo/pml_bfo_recvreq.h:            mca_mpool_base_registration_t* btl_reg = recvreq->req_rdma[i].btl_reg;
./mca/pml/bfo/pml_bfo_recvreq.h:        recvreq->req_rdma_cnt = 0;
./mca/pml/bfo/pml_bfo_recvreq.h:        recvreq->req_msgseq -= 100;
./mca/pml/bfo/pml_bfo_recvreq.h:        if(true == recvreq->req_recv.req_base.req_free_called) {
./mca/pml/bfo/pml_bfo_recvreq.h:            if( MPI_SUCCESS != recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR ) {
./mca/pml/bfo/pml_bfo_recvreq.h:            recvreq->req_recv.req_base.req_pml_complete = true;
./mca/pml/bfo/pml_bfo_recvreq.h:            recvreq->req_recv.req_base.req_ompi.req_status._ucount =
./mca/pml/bfo/pml_bfo_recvreq.h:                recvreq->req_bytes_received;
./mca/pml/bfo/pml_bfo_recvreq.h:            if (recvreq->req_recv.req_bytes_packed > recvreq->req_bytes_expected) {
./mca/pml/bfo/pml_bfo_recvreq.h:                recvreq->req_recv.req_base.req_ompi.req_status._ucount =
./mca/pml/bfo/pml_bfo_recvreq.h:                    recvreq->req_recv.req_bytes_packed;
./mca/pml/bfo/pml_bfo_recvreq.h:                recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR =
./mca/pml/bfo/pml_bfo_recvreq.h:    if(recvreq->req_match_received &&
./mca/pml/bfo/pml_bfo_recvreq.h:            recvreq->req_bytes_received >= recvreq->req_recv.req_bytes_packed &&
./mca/pml/bfo/pml_bfo_recvreq.h:                        (0 == recvreq->req_events) && lock_recv_request(recvreq)) {
./mca/pml/bfo/pml_bfo_recvreq.h:    if( req->req_recv.req_base.req_datatype->super.size | req->req_recv.req_base.req_count ) {
./mca/pml/bfo/pml_bfo_recvreq.h:                req->req_recv.req_base.req_proc->super.proc_convertor,
./mca/pml/bfo/pml_bfo_recvreq.h:                &(req->req_recv.req_base.req_datatype->super),
./mca/pml/bfo/pml_bfo_recvreq.h:                req->req_recv.req_base.req_count,
./mca/pml/bfo/pml_bfo_recvreq.h:                req->req_recv.req_base.req_addr,
./mca/pml/bfo/pml_bfo_recvreq.h:                &req->req_recv.req_base.req_convertor);
./mca/pml/bfo/pml_bfo_recvreq.h:        opal_convertor_get_unpacked_size(&req->req_recv.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_recvreq.h:                                         &req->req_bytes_expected);
./mca/pml/bfo/pml_bfo_recvreq.h:    req->req_recv.req_base.req_ompi.req_status.MPI_SOURCE = hdr->hdr_src;
./mca/pml/bfo/pml_bfo_recvreq.h:    req->req_recv.req_base.req_ompi.req_status.MPI_TAG = hdr->hdr_tag;
./mca/pml/bfo/pml_bfo_recvreq.h:    req->req_match_received = true;
./mca/pml/bfo/pml_bfo_recvreq.h:    req->req_msgseq = hdr->hdr_seq;
./mca/pml/bfo/pml_bfo_recvreq.h:    if(req->req_recv.req_bytes_packed > 0) {
./mca/pml/bfo/pml_bfo_recvreq.h:        if(MPI_ANY_SOURCE == req->req_recv.req_base.req_peer) {
./mca/pml/bfo/pml_bfo_recvreq.h:                                &req->req_recv.req_base, PERUSE_RECV);
./mca/pml/bfo/pml_bfo_recvreq.h:                                      &(recvreq->req_recv.req_base), max_data,    \
./mca/pml/bfo/pml_bfo_progress.c:            endpoint = sendreq->req_endpoint;
./mca/pml/bfo/pml_bfo_irecv.c:    ompi_request_wait_completion(&recvreq->req_recv.req_base.req_ompi);
./mca/pml/bfo/pml_bfo_irecv.c:        *status = recvreq->req_recv.req_base.req_ompi.req_status;
./mca/pml/bfo/pml_bfo_irecv.c:    rc = recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/bfo/pml_bfo_irecv.c:    frag = (mca_pml_bfo_recv_frag_t*) recvreq->req_recv.req_base.req_addr;
./mca/pml/bfo/pml_bfo_irecv.c:    src = recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE;
./mca/pml/bfo/pml_bfo_irecv.c:    tag = recvreq->req_recv.req_base.req_ompi.req_status.MPI_TAG;
./mca/pml/bfo/pml_bfo_irecv.c:    bfo_comm = recvreq->req_recv.req_base.req_comm->c_pml_comm;
./mca/pml/bfo/pml_bfo_irecv.c:    seq = recvreq->req_recv.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_irecv.c:    MCA_PML_BASE_RECV_REQUEST_FINI(&recvreq->req_recv);
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_RECV;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_lock = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_pipeline_depth  = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_bytes_received  = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_rdma_idx = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_pending = false;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_ack_sent = false;
./mca/pml/bfo/pml_bfo_irecv.c:    MCA_PML_BASE_RECV_START(&recvreq->req_recv.req_base);
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_recv.req_base.req_sequence = seq;
./mca/pml/bfo/pml_bfo_irecv.c:    proc = &bfo_comm->procs[recvreq->req_recv.req_base.req_peer];
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_recv.req_base.req_proc = proc->ompi_proc;
./mca/pml/bfo/pml_bfo_irecv.c:    frag = (mca_pml_bfo_recv_frag_t*) recvreq->req_recv.req_base.req_addr;
./mca/pml/bfo/pml_bfo_irecv.c:    src = recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE;
./mca/pml/bfo/pml_bfo_irecv.c:    tag = recvreq->req_recv.req_base.req_ompi.req_status.MPI_TAG;
./mca/pml/bfo/pml_bfo_irecv.c:    seq = recvreq->req_recv.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_irecv.c:    bfo_comm = recvreq->req_recv.req_base.req_comm->c_pml_comm;
./mca/pml/bfo/pml_bfo_irecv.c:    MCA_PML_BASE_RECV_REQUEST_FINI(&recvreq->req_recv);
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_RECV;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_lock = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_pipeline_depth  = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_bytes_received  = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_rdma_cnt = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_rdma_idx = 0;
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_pending = false;
./mca/pml/bfo/pml_bfo_irecv.c:    MCA_PML_BASE_RECV_START(&recvreq->req_recv.req_base);
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_recv.req_base.req_sequence = seq;
./mca/pml/bfo/pml_bfo_irecv.c:    proc = &bfo_comm->procs[recvreq->req_recv.req_base.req_peer];
./mca/pml/bfo/pml_bfo_irecv.c:    recvreq->req_recv.req_base.req_proc = proc->ompi_proc;
./mca/pml/bfo/pml_bfo_irecv.c:    ompi_request_wait_completion(&(recvreq->req_recv.req_base.req_ompi));
./mca/pml/bfo/pml_bfo_irecv.c:        *status = recvreq->req_recv.req_base.req_ompi.req_status;
./mca/pml/bfo/pml_bfo_irecv.c:    rc = recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/bfo/pml_bfo_isend.c:    ompi_request_wait_completion(&sendreq->req_send.req_base.req_ompi);
./mca/pml/bfo/pml_bfo_isend.c:    rc = sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/bfo/pml_bfo_start.c:                if( reuse_old_request && (sendreq->req_send.req_bytes_packed != 0) ) {
./mca/pml/bfo/pml_bfo_start.c:                    opal_convertor_set_position( &sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_recvreq.c:        recvreq->req_pending = false;
./mca/pml/bfo/pml_bfo_recvreq.c:    if(false == recvreq->req_recv.req_base.req_free_called) {
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_recv.req_base.req_free_called = true;
./mca/pml/bfo/pml_bfo_recvreq.c:                             &(recvreq->req_recv.req_base), PERUSE_RECV );
./mca/pml/bfo/pml_bfo_recvreq.c:    if( true == recvreq->req_recv.req_base.req_pml_complete ) {
./mca/pml/bfo/pml_bfo_recvreq.c:                            recvreq->req_recv.req_base.req_addr,
./mca/pml/bfo/pml_bfo_recvreq.c:                            recvreq->req_recv.req_base.req_count,
./mca/pml/bfo/pml_bfo_recvreq.c:                            recvreq->req_recv.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_recvreq.c:    OPAL_THREAD_SUB_SIZE_T(&recvreq->req_pipeline_depth, 1);
./mca/pml/bfo/pml_bfo_recvreq.c:    OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, bytes_received);
./mca/pml/bfo/pml_bfo_recvreq.c:            recvreq->req_rdma_offset < recvreq->req_send_offset) {
./mca/pml/bfo/pml_bfo_recvreq.c:    ompi_proc_t* proc = (ompi_proc_t*)recvreq->req_recv.req_base.req_proc;
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_send_offset = bytes_received;
./mca/pml/bfo/pml_bfo_recvreq.c:        if(opal_convertor_need_buffers(&recvreq->req_recv.req_base.req_convertor) == 0 &&
./mca/pml/bfo/pml_bfo_recvreq.c:            opal_convertor_get_current_pointer( &recvreq->req_recv.req_base.req_convertor, (void**)&(base) );
./mca/pml/bfo/pml_bfo_recvreq.c:                recvreq->req_rdma_cnt = mca_pml_bfo_rdma_btls(bml_endpoint,
./mca/pml/bfo/pml_bfo_recvreq.c:                        base, recvreq->req_recv.req_bytes_packed,
./mca/pml/bfo/pml_bfo_recvreq.c:                        recvreq->req_rdma );
./mca/pml/bfo/pml_bfo_recvreq.c:                recvreq->req_rdma_cnt = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:            if (recvreq->req_rdma_cnt != 0) {
./mca/pml/bfo/pml_bfo_recvreq.c:                recvreq->req_send_offset = hdr->hdr_msg_length;
./mca/pml/bfo/pml_bfo_recvreq.c:                recvreq->req_send_offset = hdr->hdr_msg_length -
./mca/pml/bfo/pml_bfo_recvreq.c:                if(recvreq->req_send_offset < bytes_received)
./mca/pml/bfo/pml_bfo_recvreq.c:                    recvreq->req_send_offset = bytes_received;
./mca/pml/bfo/pml_bfo_recvreq.c:                opal_convertor_set_position(&recvreq->req_recv.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_recvreq.c:                        &recvreq->req_send_offset);
./mca/pml/bfo/pml_bfo_recvreq.c:                recvreq->req_rdma_cnt =
./mca/pml/bfo/pml_bfo_recvreq.c:                            recvreq->req_send_offset - bytes_received,
./mca/pml/bfo/pml_bfo_recvreq.c:                            recvreq->req_rdma);
./mca/pml/bfo/pml_bfo_recvreq.c:        if(recvreq->req_send_offset == hdr->hdr_msg_length)
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_ack_sent = true;
./mca/pml/bfo/pml_bfo_recvreq.c:                                             recvreq, recvreq->req_send_offset,
./mca/pml/bfo/pml_bfo_recvreq.c:                                             recvreq->req_send_offset == bytes_received);
./mca/pml/bfo/pml_bfo_recvreq.c:        recvreq->req_events--;
./mca/pml/bfo/pml_bfo_recvreq.c:    mca_pml_bfo_send_fin(recvreq->req_recv.req_base.req_proc,
./mca/pml/bfo/pml_bfo_recvreq.c:                         des->order, 0, (uint16_t)recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_recvreq.c:                         recvreq->req_recv.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_recvreq.c:                         recvreq->req_recv.req_base.req_comm->c_my_rank);
./mca/pml/bfo/pml_bfo_recvreq.c:    OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, frag->rdma_length);
./mca/pml/bfo/pml_bfo_recvreq.c:                              &recvreq->req_recv.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_recvreq.c:                                 &(recvreq->req_recv.req_base),
./mca/pml/bfo/pml_bfo_recvreq.c:        recvreq->req_events++;
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_addr,
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_count,
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_addr,
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_count,
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_recvreq.c:    OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, bytes_received);
./mca/pml/bfo/pml_bfo_recvreq.c:            recvreq->req_rdma_offset < recvreq->req_send_offset) {
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_recv.req_bytes_packed = hdr->hdr_rndv.hdr_msg_length;
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->remote_req_send = hdr->hdr_rndv.hdr_src_req;
./mca/pml/bfo/pml_bfo_recvreq.c:    if(opal_convertor_need_buffers(&recvreq->req_recv.req_base.req_convertor) == true) {
./mca/pml/bfo/pml_bfo_recvreq.c:    bml_endpoint = (mca_bml_base_endpoint_t*)recvreq->req_recv.req_base.req_proc->proc_endpoints[OMPI_PROC_ENDPOINT_TAG_BML];
./mca/pml/bfo/pml_bfo_recvreq.c:        if ((recvreq->req_recv.req_base.req_proc->super.proc_arch & OPAL_ARCH_ISBIGENDIAN) !=
./mca/pml/bfo/pml_bfo_recvreq.c:        if (recvreq->req_recv.req_base.req_convertor.flags & CONVERTOR_CUDA) {
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_recv.req_bytes_packed = hdr->hdr_rndv.hdr_msg_length;
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->remote_req_send = hdr->hdr_rndv.hdr_src_req;
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_rdma_offset = bytes_received;
./mca/pml/bfo/pml_bfo_recvreq.c:                                   recvreq->req_recv.req_base.req_addr,
./mca/pml/bfo/pml_bfo_recvreq.c:                                   recvreq->req_recv.req_base.req_count,
./mca/pml/bfo/pml_bfo_recvreq.c:                                   recvreq->req_recv.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_recvreq.c:                                   recvreq->req_recv.req_base.req_addr,
./mca/pml/bfo/pml_bfo_recvreq.c:                                   recvreq->req_recv.req_base.req_count,
./mca/pml/bfo/pml_bfo_recvreq.c:                                   recvreq->req_recv.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_recvreq.c:    OPAL_THREAD_ADD_SIZE_T(&recvreq->req_bytes_received, bytes_received);
./mca/pml/bfo/pml_bfo_recvreq.c:       recvreq->req_rdma_offset < recvreq->req_send_offset) {
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_recv.req_bytes_packed = bytes_received;
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_addr,
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_count,
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_addr,
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_count,
./mca/pml/bfo/pml_bfo_recvreq.c:                               recvreq->req_recv.req_base.req_datatype);
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_bytes_received += bytes_received;
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_recv.req_base.req_ompi.req_status.MPI_TAG = hdr->hdr_match.hdr_tag;
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE = hdr->hdr_match.hdr_src;
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_bytes_received = bytes_packed;
./mca/pml/bfo/pml_bfo_recvreq.c:    recvreq->req_bytes_expected = bytes_packed;
./mca/pml/bfo/pml_bfo_recvreq.c:    int num_tries = recvreq->req_rdma_cnt, num_fail = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    size_t bytes_remaining = recvreq->req_send_offset -
./mca/pml/bfo/pml_bfo_recvreq.c:        recvreq->req_rdma_offset;
./mca/pml/bfo/pml_bfo_recvreq.c:        for(i = 0; i < recvreq->req_rdma_cnt; i++) {
./mca/pml/bfo/pml_bfo_recvreq.c:            if(recvreq->req_rdma[i].bml_btl != start_bml_btl)
./mca/pml/bfo/pml_bfo_recvreq.c:            if( OPAL_LIKELY(recvreq->req_rdma[i].length) )
./mca/pml/bfo/pml_bfo_recvreq.c:                recvreq->req_rdma_idx = i;
./mca/pml/bfo/pml_bfo_recvreq.c:           recvreq->req_pipeline_depth < mca_pml_bfo.recv_pipeline_depth) {
./mca/pml/bfo/pml_bfo_recvreq.c:                if(false == recvreq->req_pending) {
./mca/pml/bfo/pml_bfo_recvreq.c:                    recvreq->req_pending = true;
./mca/pml/bfo/pml_bfo_recvreq.c:            rdma_idx = recvreq->req_rdma_idx;
./mca/pml/bfo/pml_bfo_recvreq.c:            bml_btl = recvreq->req_rdma[rdma_idx].bml_btl;
./mca/pml/bfo/pml_bfo_recvreq.c:            reg = recvreq->req_rdma[rdma_idx].btl_reg;
./mca/pml/bfo/pml_bfo_recvreq.c:            size = recvreq->req_rdma[rdma_idx].length;
./mca/pml/bfo/pml_bfo_recvreq.c:            if(++recvreq->req_rdma_idx >= recvreq->req_rdma_cnt)
./mca/pml/bfo/pml_bfo_recvreq.c:                recvreq->req_rdma_idx = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:        OPAL_THREAD_LOCK(&recvreq->lock);
./mca/pml/bfo/pml_bfo_recvreq.c:        opal_convertor_set_position( &recvreq->req_recv.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_recvreq.c:                                     &recvreq->req_rdma_offset );
./mca/pml/bfo/pml_bfo_recvreq.c:                                 &recvreq->req_recv.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_recvreq.c:        OPAL_THREAD_UNLOCK(&recvreq->lock);
./mca/pml/bfo/pml_bfo_recvreq.c:            (!recvreq->req_ack_sent) ? MCA_PML_BFO_HDR_TYPE_ACK : 0;
./mca/pml/bfo/pml_bfo_recvreq.c:        hdr->hdr_req = recvreq->remote_req_send;
./mca/pml/bfo/pml_bfo_recvreq.c:        hdr->hdr_rdma_offset = recvreq->req_rdma_offset;
./mca/pml/bfo/pml_bfo_recvreq.c:        if(!recvreq->req_ack_sent)
./mca/pml/bfo/pml_bfo_recvreq.c:            recvreq->req_ack_sent = true;
./mca/pml/bfo/pml_bfo_recvreq.c:        bfo_hdr_hton(hdr, MCA_PML_BFO_HDR_TYPE_PUT, recvreq->req_recv.req_base.req_proc);
./mca/pml/bfo/pml_bfo_recvreq.c:                                      &(recvreq->req_recv.req_base), size,
./mca/pml/bfo/pml_bfo_recvreq.c:                 recvreq->req_events++;
./mca/pml/bfo/pml_bfo_recvreq.c:            recvreq->req_rdma_offset += size;
./mca/pml/bfo/pml_bfo_recvreq.c:            OPAL_THREAD_ADD_SIZE_T(&recvreq->req_pipeline_depth, 1);
./mca/pml/bfo/pml_bfo_recvreq.c:            recvreq->req_rdma[rdma_idx].length -= size;
./mca/pml/bfo/pml_bfo_recvreq.c:    if(OPAL_UNLIKELY(req->req_recv.req_base.req_type == MCA_PML_REQUEST_IPROBE ||
./mca/pml/bfo/pml_bfo_recvreq.c:                     req->req_recv.req_base.req_type == MCA_PML_REQUEST_IMPROBE))
./mca/pml/bfo/pml_bfo_recvreq.c:    if(req->req_recv.req_base.req_type != MCA_PML_REQUEST_PROBE ||
./mca/pml/bfo/pml_bfo_recvreq.c:       req->req_recv.req_base.req_type != MCA_PML_REQUEST_MPROBE) {
./mca/pml/bfo/pml_bfo_recvreq.c:                                &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/bfo/pml_bfo_recvreq.c:    int tag = req->req_recv.req_base.req_tag;
./mca/pml/bfo/pml_bfo_recvreq.c:    mca_pml_bfo_comm_t* comm = req->req_recv.req_base.req_comm->c_pml_comm;
./mca/pml/bfo/pml_bfo_recvreq.c:            req->req_recv.req_base.req_proc = proc[i].ompi_proc;
./mca/pml/bfo/pml_bfo_recvreq.c:            req->req_recv.req_base.req_proc = proc[i].ompi_proc;
./mca/pml/bfo/pml_bfo_recvreq.c:    mca_pml_bfo_comm_t* comm = req->req_recv.req_base.req_comm->c_pml_comm;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_lock = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_pipeline_depth = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_bytes_received = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_bytes_expected = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_rdma_cnt = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_events = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_restartseq = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_errstate = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_rdma_idx = 0;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_pending = false;
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_ack_sent = false;
./mca/pml/bfo/pml_bfo_recvreq.c:    MCA_PML_BASE_RECV_START(&req->req_recv.req_base);
./mca/pml/bfo/pml_bfo_recvreq.c:                            &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/bfo/pml_bfo_recvreq.c:    req->req_recv.req_base.req_sequence = comm->recv_sequence++;
./mca/pml/bfo/pml_bfo_recvreq.c:    if(req->req_recv.req_base.req_peer == OMPI_ANY_SOURCE) {
./mca/pml/bfo/pml_bfo_recvreq.c:            req->req_recv.req_base.req_proc = ompi_proc_local_proc;
./mca/pml/bfo/pml_bfo_recvreq.c:        proc = &comm->procs[req->req_recv.req_base.req_peer];
./mca/pml/bfo/pml_bfo_recvreq.c:        req->req_recv.req_base.req_proc = proc->ompi_proc;
./mca/pml/bfo/pml_bfo_recvreq.c:                                &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/bfo/pml_bfo_recvreq.c:        req->req_match_received = false;
./mca/pml/bfo/pml_bfo_recvreq.c:                                    &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/bfo/pml_bfo_recvreq.c:                                   req->req_recv.req_base.req_comm,
./mca/pml/bfo/pml_bfo_recvreq.c:                                    &(req->req_recv.req_base), PERUSE_RECV);
./mca/pml/bfo/pml_bfo_recvreq.c:            req->req_recv.req_base.req_addr = frag;
./mca/pml/bfo/pml_bfo_recvfrag.c:    sendreq->req_recv = hdr->hdr_ack.hdr_dst_req;
./mca/pml/bfo/pml_bfo_recvfrag.c:        sendreq->req_throttle_sends = true;
./mca/pml/bfo/pml_bfo_recvfrag.c:                                         sendreq->req_send.req_bytes_packed -
./mca/pml/bfo/pml_bfo_recvfrag.c:    if (sendreq->req_state != 0) {
./mca/pml/bfo/pml_bfo_recvfrag.c:        OPAL_THREAD_ADD32(&sendreq->req_state, -1);
./mca/pml/bfo/pml_bfo_failover.c:        if (basereq->req_type == MCA_PML_REQUEST_RECV) {
./mca/pml/bfo/pml_bfo_failover.c:		 recvreq->req_recv.req_base.req_comm->c_contextid) ||
./mca/pml/bfo/pml_bfo_failover.c:		 recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE) ||
./mca/pml/bfo/pml_bfo_failover.c:                (hdr->hdr_fin.hdr_match.hdr_seq != (uint16_t)recvreq->req_msgseq)) {
./mca/pml/bfo/pml_bfo_failover.c:                                    (uint16_t)recvreq->req_msgseq, hdr->hdr_fin.hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_recv.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:            if (hdr->hdr_fin.hdr_match.hdr_common.hdr_flags != recvreq->req_restartseq) {
./mca/pml/bfo/pml_bfo_failover.c:                                    (uint16_t)recvreq->req_msgseq, hdr->hdr_fin.hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_recv.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:        } else if (basereq->req_type == MCA_PML_REQUEST_SEND) {
./mca/pml/bfo/pml_bfo_failover.c:		 sendreq->req_send.req_base.req_comm->c_contextid) ||
./mca/pml/bfo/pml_bfo_failover.c:		 sendreq->req_send.req_base.req_peer) ||
./mca/pml/bfo/pml_bfo_failover.c:		 (uint16_t)sendreq->req_send.req_base.req_sequence)) {
./mca/pml/bfo/pml_bfo_failover.c:                uint16_t seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_failover.c:                                    sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                                    sendreq->req_send.req_base.req_peer,
./mca/pml/bfo/pml_bfo_failover.c:                                    sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:            if (hdr->hdr_fin.hdr_match.hdr_common.hdr_flags != sendreq->req_restartseq) {
./mca/pml/bfo/pml_bfo_failover.c:                uint16_t seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_failover.c:                                    sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                                    sendreq->req_send.req_base.req_peer,
./mca/pml/bfo/pml_bfo_failover.c:                                    sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:    if ((hdr->hdr_match.hdr_ctx != recvreq->req_recv.req_base.req_comm->c_contextid) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_match.hdr_src != recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_match.hdr_seq != (uint16_t)recvreq->req_msgseq)) {
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)recvreq->req_msgseq, hdr->hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->req_recv.req_base.req_comm->c_contextid, hdr->hdr_match.hdr_ctx,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE,
./mca/pml/bfo/pml_bfo_failover.c:                            hdr->hdr_match.hdr_src, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE,
./mca/pml/bfo/pml_bfo_failover.c:    if (hdr->hdr_restart.hdr_restartseq == recvreq->req_restartseq) {
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)recvreq->req_msgseq, hdr->hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->req_recv.req_base.req_comm->c_contextid, hdr->hdr_match.hdr_ctx,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE,
./mca/pml/bfo/pml_bfo_failover.c:                            hdr->hdr_match.hdr_src, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:    recvreq->req_restartseq++;
./mca/pml/bfo/pml_bfo_failover.c:    recvreq->req_errstate |= RECVREQ_RNDVRESTART_RECVED;
./mca/pml/bfo/pml_bfo_failover.c:                        recvreq->req_events, recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                        recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                        recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:    if (0 == recvreq->req_events) {
./mca/pml/bfo/pml_bfo_failover.c:    if ((hdr->hdr_match.hdr_ctx != sendreq->req_send.req_base.req_comm->c_contextid) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_match.hdr_src != sendreq->req_send.req_base.req_peer) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_match.hdr_seq != (uint16_t)sendreq->req_send.req_base.req_sequence) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_restart.hdr_restartseq != sendreq->req_restartseq)) {
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence, hdr->hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_contextid, hdr->hdr_match.hdr_ctx,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer, hdr->hdr_match.hdr_src,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq, hdr->hdr_restart.hdr_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_restart++;
./mca/pml/bfo/pml_bfo_failover.c:    if (2 == sendreq->req_restart) {
./mca/pml/bfo/pml_bfo_failover.c:                            (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:                            (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    if ((hdr->hdr_match.hdr_ctx != sendreq->req_send.req_base.req_comm->c_contextid) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_match.hdr_src != sendreq->req_send.req_base.req_peer) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_match.hdr_seq != (uint16_t)sendreq->req_send.req_base.req_sequence)) {
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence, hdr->hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_contextid, hdr->hdr_match.hdr_ctx,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer, hdr->hdr_match.hdr_src,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq, hdr->hdr_restart.hdr_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    if (NULL == sendreq->req_recv.pval) {
./mca/pml/bfo/pml_bfo_failover.c:        sendreq->req_recv = hdr->hdr_restart.hdr_dst_req;
./mca/pml/bfo/pml_bfo_failover.c:    if (hdr->hdr_restart.hdr_restartseq >= sendreq->req_restartseq) {
./mca/pml/bfo/pml_bfo_failover.c:        assert(sendreq->req_send.req_base.req_ompi.req_state == OMPI_REQUEST_ACTIVE);
./mca/pml/bfo/pml_bfo_failover.c:        sendreq->req_error++;
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_events, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:        if (0 == sendreq->req_events) {
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq, hdr->hdr_restart.hdr_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence, hdr->hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                            (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    if ((hdr->hdr_match.hdr_ctx != sendreq->req_send.req_base.req_comm->c_contextid) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_match.hdr_src != sendreq->req_send.req_base.req_peer) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_match.hdr_seq != (uint16_t)sendreq->req_send.req_base.req_sequence) ||
./mca/pml/bfo/pml_bfo_failover.c:        (hdr->hdr_restart.hdr_restartseq != sendreq->req_restartseq)) {
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence, hdr->hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_contextid, hdr->hdr_match.hdr_ctx,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer, hdr->hdr_match.hdr_src,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq, hdr->hdr_restart.hdr_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:                        (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_send.req_base.req_peer, sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                        (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    ompi_proc_t* proc = (ompi_proc_t*)sendreq->req_send.req_base.req_proc;
./mca/pml/bfo/pml_bfo_failover.c:        sendreq->req_restartseq++;
./mca/pml/bfo/pml_bfo_failover.c:    assert(0 == sendreq->req_events);
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_ctx = sendreq->req_send.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_src = sendreq->req_send.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_seq = (uint16_t)sendreq->req_send.req_base.req_sequence;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_restartseq = sendreq->req_restartseq;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_dst_req = sendreq->req_recv;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_dst_rank = sendreq->req_send.req_base.req_peer; /* Needed for NACKs */
./mca/pml/bfo/pml_bfo_failover.c:                        (uint16_t)sendreq->req_send.req_base.req_sequence, sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                        (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c: * started over.  The sendreq->req_restartseq will be non-zero which will
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence, sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_my_rank, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence, sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_my_rank, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    if (sendreq->req_send.req_send_mode == MCA_PML_BASE_SEND_BUFFERED &&
./mca/pml/bfo/pml_bfo_failover.c:        sendreq->req_send.req_addr != sendreq->req_send.req_base.req_addr) {
./mca/pml/bfo/pml_bfo_failover.c:    OPAL_THREAD_LOCK(&sendreq->req_send_range_lock);
./mca/pml/bfo/pml_bfo_failover.c:    first_item = opal_list_get_begin(&sendreq->req_send_ranges);
./mca/pml/bfo/pml_bfo_failover.c:    last_item = opal_list_get_last(&sendreq->req_send_ranges);
./mca/pml/bfo/pml_bfo_failover.c:        opal_list_remove_item(&sendreq->req_send_ranges, last_item);
./mca/pml/bfo/pml_bfo_failover.c:        last_item = opal_list_get_last(&sendreq->req_send_ranges);
./mca/pml/bfo/pml_bfo_failover.c:    OPAL_THREAD_UNLOCK(&sendreq->req_send_range_lock);
./mca/pml/bfo/pml_bfo_failover.c:    opal_convertor_set_position(&sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_failover.c:        sendreq->req_restartseq++;
./mca/pml/bfo/pml_bfo_failover.c:    endpoint = (mca_bml_base_endpoint_t*)sendreq->req_send.req_base.req_proc->proc_endpoints[OMPI_PROC_ENDPOINT_TAG_BML];
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_endpoint = endpoint;
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_state = 0;
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_lock = 0;
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_pipeline_depth = 0;
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_bytes_delivered = 0;
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_pending = MCA_PML_BFO_SEND_PENDING_NONE;
./mca/pml/bfo/pml_bfo_failover.c:     *     sendreq->req_send.req_base.req_sequence
./mca/pml/bfo/pml_bfo_failover.c:     *     sendreq->req_restartseq
./mca/pml/bfo/pml_bfo_failover.c:     *     sendreq->req_recv.pval
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_restart = 0;         /* reset in case we restart again */
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_error = 0;           /* clear error state */
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_events = 0;          /* clear events, probably 0 anyways */
./mca/pml/bfo/pml_bfo_failover.c:    MCA_PML_BASE_SEND_START( &sendreq->req_send.req_base );
./mca/pml/bfo/pml_bfo_failover.c:        endpoint = sendreq->req_endpoint;
./mca/pml/bfo/pml_bfo_failover.c:        if (0 != sendreq->req_send.req_bytes_packed) {
./mca/pml/bfo/pml_bfo_failover.c:            opal_convertor_set_position(&sendreq->req_send.req_base.req_convertor,
./mca/pml/bfo/pml_bfo_failover.c:                                (int)sendreq->req_endpoint->btl_eager.arr_size);
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            (void *)sendreq, sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    sendreq->req_restart++;
./mca/pml/bfo/pml_bfo_failover.c:    if (2 == sendreq->req_restart) {
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_recv.pval, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:                            (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_recv.pval, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    ompi_proc_t* proc = (ompi_proc_t*)recvreq->req_recv.req_base.req_proc;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_ctx = recvreq->req_recv.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_src = recvreq->req_recv.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_seq = (uint16_t)recvreq->req_msgseq;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_restartseq = recvreq->req_restartseq;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_src_req = recvreq->remote_req_send;
./mca/pml/bfo/pml_bfo_failover.c:                        recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                        recvreq->remote_req_send.pval,
./mca/pml/bfo/pml_bfo_failover.c:                        recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE,
./mca/pml/bfo/pml_bfo_failover.c:    recvreq->req_errstate |= RECVREQ_RECVERRSENT;
./mca/pml/bfo/pml_bfo_failover.c:    ompi_proc_t* proc = (ompi_proc_t*)recvreq->req_recv.req_base.req_proc;
./mca/pml/bfo/pml_bfo_failover.c:    assert((recvreq->req_errstate & RECVREQ_RNDVRESTART_RECVED) == RECVREQ_RNDVRESTART_RECVED);
./mca/pml/bfo/pml_bfo_failover.c:    assert((recvreq->req_errstate & RECVREQ_RNDVRESTART_ACKED) == 0);
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_ctx = recvreq->req_recv.req_base.req_comm->c_contextid;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_src = recvreq->req_recv.req_base.req_comm->c_my_rank;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_match.hdr_seq = (uint16_t)recvreq->req_msgseq;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_restartseq = recvreq->req_restartseq;
./mca/pml/bfo/pml_bfo_failover.c:    restart->hdr_src_req = recvreq->remote_req_send;
./mca/pml/bfo/pml_bfo_failover.c:                        tag, recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                        recvreq->remote_req_send.pval, (void *)recvreq, status,
./mca/pml/bfo/pml_bfo_failover.c:                        recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE,
./mca/pml/bfo/pml_bfo_failover.c:    recvreq->req_errstate &= ~RECVREQ_RNDVRESTART_RECVED;
./mca/pml/bfo/pml_bfo_failover.c:    recvreq->req_errstate |= RECVREQ_RNDVRESTART_ACKED;
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_msgseq, restart->hdr_match.hdr_seq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_restartseq, restart->hdr_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_recv.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->remote_req_send.pval,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:            recvreq->req_errstate &= ~RECVREQ_RNDVRESTART_ACKED;
./mca/pml/bfo/pml_bfo_failover.c:            recvreq->req_errstate |= RECVREQ_RNDVRESTART_RECVED;
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->remote_req_send.pval,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:            if( OPAL_UNLIKELY(recvreq->req_errstate)) {
./mca/pml/bfo/pml_bfo_failover.c:                if (recvreq->req_errstate & RECVREQ_RNDVRESTART_RECVED) {
./mca/pml/bfo/pml_bfo_failover.c:        proc = (ompi_proc_t*)sendreq->req_send.req_base.req_proc;
./mca/pml/bfo/pml_bfo_failover.c:        switch(sendreq->req_pending) {
./mca/pml/bfo/pml_bfo_failover.c:            sendreq->req_error++;
./mca/pml/bfo/pml_bfo_failover.c:        proc = (ompi_proc_t*)recvreq->req_recv.req_base.req_proc;
./mca/pml/bfo/pml_bfo_failover.c:            if (recvreq->req_errstate) {
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                                    recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:                if (recvreq->req_errstate) {
./mca/pml/bfo/pml_bfo_failover.c:                                        recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                        recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                                        recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:                                        recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                        recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                                        recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:        recvreq->req_events--;
./mca/pml/bfo/pml_bfo_failover.c:        assert(recvreq->req_events >= 0);
./mca/pml/bfo/pml_bfo_failover.c:        if(OPAL_UNLIKELY (recvreq->req_errstate & RECVREQ_RNDVRESTART_RECVED)) {
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_events, recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->remote_req_send.pval, (void *)recvreq, status,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:            if (0 == recvreq->req_events) {
./mca/pml/bfo/pml_bfo_failover.c:        recvreq->req_events--;
./mca/pml/bfo/pml_bfo_failover.c:        assert(recvreq->req_events >= 0);
./mca/pml/bfo/pml_bfo_failover.c:        if(OPAL_UNLIKELY(recvreq->req_errstate & RECVREQ_RNDVRESTART_RECVED)) {
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_events, recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->remote_req_send.pval, (void *)recvreq, status,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:            if (0 == recvreq->req_events) {
./mca/pml/bfo/pml_bfo_failover.c:    hdr->hdr_rndv.hdr_dst_req = sendreq->req_recv;
./mca/pml/bfo/pml_bfo_failover.c:    hdr->hdr_rndv.hdr_restartseq = sendreq->req_restartseq;
./mca/pml/bfo/pml_bfo_failover.c:                        type, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_send.req_base.req_comm->c_my_rank, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_recv.pval, sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:                            type, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:        *bml_btl = mca_bml_base_btl_array_find(&sendreq->req_endpoint->btl_eager, btl);
./mca/pml/bfo/pml_bfo_failover.c:                                type, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_restartseq, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:            *bml_btl = mca_bml_base_btl_array_get_next(&sendreq->req_endpoint->btl_eager);
./mca/pml/bfo/pml_bfo_failover.c:                            type, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_restartseq, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                            sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:        *bml_btl = mca_bml_base_btl_array_find(&sendreq->req_endpoint->btl_rdma, btl);
./mca/pml/bfo/pml_bfo_failover.c:                                type, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_restartseq, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:            *bml_btl = mca_bml_base_btl_array_get_next(&sendreq->req_endpoint->btl_rdma);
./mca/pml/bfo/pml_bfo_failover.c:        ompi_proc_t *proc = (ompi_proc_t*)recvreq->req_recv.req_base.req_proc;
./mca/pml/bfo/pml_bfo_failover.c:                            type, recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:                                type, recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:        ompi_proc_t *proc = (ompi_proc_t*)recvreq->req_recv.req_base.req_proc;
./mca/pml/bfo/pml_bfo_failover.c:                            type, recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                            recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c:                                type, recvreq->req_msgseq, recvreq->req_restartseq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->remote_req_send.pval, (void *)recvreq,
./mca/pml/bfo/pml_bfo_failover.c:                                recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE);
./mca/pml/bfo/pml_bfo_failover.c: * because it cannot be completed until the sendreq->req_state value
./mca/pml/bfo/pml_bfo_failover.c: * reaches 0.  And for the sendreq->req_state to reach 0, the
./mca/pml/bfo/pml_bfo_failover.c: * sendreq->req_error is set, that means that something has happend
./mca/pml/bfo/pml_bfo_failover.c: * receiver.  We also check the sendreq->req_acked field to see if it
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_events, (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_restartseq, (void *)sendreq,
./mca/pml/bfo/pml_bfo_failover.c:                        sendreq->req_recv.pval,
./mca/pml/bfo/pml_bfo_failover.c:                        status, sendreq->req_send.req_base.req_peer);
./mca/pml/bfo/pml_bfo_failover.c:    if (0 == sendreq->req_events) {
./mca/pml/bfo/pml_bfo_failover.c:        if ((hdr->hdr_match.hdr_ctx != sendreq->req_send.req_base.req_comm->c_contextid) ||
./mca/pml/bfo/pml_bfo_failover.c:            (hdr->hdr_match.hdr_src != sendreq->req_send.req_base.req_comm->c_my_rank) ||
./mca/pml/bfo/pml_bfo_failover.c:            (hdr->hdr_match.hdr_seq != (uint16_t)sendreq->req_send.req_base.req_sequence)) {
./mca/pml/bfo/pml_bfo_failover.c:                                (uint16_t)sendreq->req_send.req_base.req_sequence,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_send.req_base.req_comm->c_contextid,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_send.req_base.req_comm->c_my_rank,
./mca/pml/bfo/pml_bfo_failover.c:                                sendreq->req_restartseq, hdr->hdr_rndv.hdr_restartseq,
./mca/pml/bfo/pml_bfo_failover.h:    if( OPAL_UNLIKELY(recvreq->req_errstate)) {                                             \
./mca/pml/bfo/pml_bfo_failover.h:        if (recvreq->req_errstate & RECVREQ_RNDVRESTART_RECVED) {                           \
./mca/pml/bfo/pml_bfo_failover.h:                                recvreq->req_events, recvreq->req_msgseq, recvreq->req_restartseq, \
./mca/pml/bfo/pml_bfo_failover.h:                                (unsigned long)recvreq->remote_req_send.pval,               \
./mca/pml/bfo/pml_bfo_failover.h:                                recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE); \
./mca/pml/bfo/pml_bfo_failover.h:            if (0 == recvreq->req_events) {                                                 \
./mca/pml/bfo/pml_bfo_failover.h:    if (sendreq->req_state == -1) {                          \
./mca/pml/bfo/pml_bfo_failover.h:        OPAL_THREAD_ADD32(&sendreq->req_state, 1);           \
./mca/pml/bfo/pml_bfo_failover.h:    if( OPAL_UNLIKELY(sendreq->req_error)) {                                               \
./mca/pml/bfo/pml_bfo_failover.h:                            (uint16_t)sendreq->req_send.req_base.req_sequence,             \
./mca/pml/bfo/pml_bfo_failover.h:                            (unsigned long)sendreq, (unsigned long)sendreq->req_recv.pval, \
./mca/pml/bfo/pml_bfo_failover.h:                            sendreq->req_send.req_base.req_peer);                          \
./mca/pml/bfo/pml_bfo_failover.h:    if ( OPAL_UNLIKELY(sendreq->req_error)) {                                             \
./mca/pml/bfo/pml_bfo_failover.h:    if (0 < sendreq->req_restartseq) {                          \
./mca/pml/bfo/pml_bfo_failover.h:                            sendreq->req_events,                                          \
./mca/pml/bfo/pml_bfo_failover.h:                            (uint16_t)sendreq->req_send.req_base.req_sequence,            \
./mca/pml/bfo/pml_bfo_failover.h:                            sendreq->req_restartseq, (void *)sendreq,                     \
./mca/pml/bfo/pml_bfo_failover.h:                            sendreq->req_recv.pval, sendreq->req_send.req_base.req_peer); \
./mca/pml/bfo/pml_bfo_failover.h:        sendreq->req_error++;                                                             \
./mca/pml/bfo/pml_bfo_failover.h:        if (0 == sendreq->req_events) {                                                   \
./mca/pml/bfo/pml_bfo_failover.h:    if ((int)mca_bml_base_btl_array_get_size(&sendreq->req_endpoint->btl_send)  \
./mca/pml/bfo/pml_bfo_failover.h:        sendreq->req_error++;                                                   \
./mca/pml/bfo/pml_bfo_sendreq.h:    return OPAL_THREAD_ADD32(&sendreq->req_lock,  1) == 1;
./mca/pml/bfo/pml_bfo_sendreq.h:    return OPAL_THREAD_ADD32(&sendreq->req_lock, -1) == 0;
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_pending = type;
./mca/pml/bfo/pml_bfo_sendreq.h:        *type = sendreq->req_pending;
./mca/pml/bfo/pml_bfo_sendreq.h:        sendreq->req_pending = MCA_PML_BFO_SEND_PENDING_NONE;
./mca/pml/bfo/pml_bfo_sendreq.h:            sendreq->req_send.req_base.req_proc = proc;                 \
./mca/pml/bfo/pml_bfo_sendreq.h:        MCA_PML_BASE_SEND_REQUEST_INIT(&sendreq->req_send,              \
./mca/pml/bfo/pml_bfo_sendreq.h:    for(r = 0; r < sendreq->req_rdma_cnt; r++) {
./mca/pml/bfo/pml_bfo_sendreq.h:        struct mca_btl_base_registration_handle_t* handle = sendreq->req_rdma[r].btl_reg;
./mca/pml/bfo/pml_bfo_sendreq.h:        mca_bml_base_btl_t *bml_btl = sendreq->req_rdma[r].bml_btl;
./mca/pml/bfo/pml_bfo_sendreq.h:            sendreq->req_rdma[r].btl_reg = NULL;
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_rdma_cnt = 0;
./mca/pml/bfo/pml_bfo_sendreq.h:                            &(sendreq->req_send.req_base), PERUSE_SEND);             \
./mca/pml/bfo/pml_bfo_sendreq.h:    if(false == sendreq->req_send.req_base.req_pml_complete) {
./mca/pml/bfo/pml_bfo_sendreq.h:        if(sendreq->req_send.req_bytes_packed > 0) {
./mca/pml/bfo/pml_bfo_sendreq.h:                                     &(sendreq->req_send.req_base), PERUSE_SEND);
./mca/pml/bfo/pml_bfo_sendreq.h:        if (sendreq->req_send.req_send_mode == MCA_PML_BASE_SEND_BUFFERED &&
./mca/pml/bfo/pml_bfo_sendreq.h:            sendreq->req_send.req_addr != sendreq->req_send.req_base.req_addr) {
./mca/pml/bfo/pml_bfo_sendreq.h:        sendreq->req_send.req_base.req_pml_complete = true;
./mca/pml/bfo/pml_bfo_sendreq.h:        if( !REQUEST_COMPLETE( &((sendreq->req_send).req_base.req_ompi)) ) {
./mca/pml/bfo/pml_bfo_sendreq.h:            if( MPI_SUCCESS != sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR ) {
./mca/pml/bfo/pml_bfo_sendreq.h:        sendreq->req_send.req_base.req_sequence -= 100;
./mca/pml/bfo/pml_bfo_sendreq.h:        if(true == sendreq->req_send.req_base.req_free_called) {
./mca/pml/bfo/pml_bfo_sendreq.h:    if(sendreq->req_state == 0 &&
./mca/pml/bfo/pml_bfo_sendreq.h:            sendreq->req_bytes_delivered >= sendreq->req_send.req_bytes_packed
./mca/pml/bfo/pml_bfo_sendreq.h:    size_t size = sendreq->req_send.req_bytes_packed;
./mca/pml/bfo/pml_bfo_sendreq.h:        switch(sendreq->req_send.req_send_mode) {
./mca/pml/bfo/pml_bfo_sendreq.h:        if(sendreq->req_send.req_send_mode == MCA_PML_BASE_SEND_BUFFERED) {
./mca/pml/bfo/pml_bfo_sendreq.h:                (opal_convertor_need_buffers(&sendreq->req_send.req_base.req_convertor) == false) {
./mca/pml/bfo/pml_bfo_sendreq.h:            opal_convertor_get_current_pointer( &sendreq->req_send.req_base.req_convertor, (void**)&base );
./mca/pml/bfo/pml_bfo_sendreq.h:            if( 0 != (sendreq->req_rdma_cnt = (uint32_t)mca_pml_bfo_rdma_btls(
./mca/pml/bfo/pml_bfo_sendreq.h:                                                                              sendreq->req_endpoint,
./mca/pml/bfo/pml_bfo_sendreq.h:                                                                              sendreq->req_send.req_bytes_packed,
./mca/pml/bfo/pml_bfo_sendreq.h:                                                                              sendreq->req_rdma))) {
./mca/pml/bfo/pml_bfo_sendreq.h:                                                         sendreq->req_send.req_bytes_packed);
./mca/pml/bfo/pml_bfo_sendreq.h:            if (sendreq->req_send.req_base.req_convertor.flags & CONVERTOR_CUDA) {
./mca/pml/bfo/pml_bfo_sendreq.h:    mca_pml_bfo_comm_t* comm = sendreq->req_send.req_base.req_comm->c_pml_comm;
./mca/pml/bfo/pml_bfo_sendreq.h:                                        sendreq->req_send.req_base.req_proc->proc_endpoints[OMPI_PROC_ENDPOINT_TAG_BML];
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_endpoint = endpoint;
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_state = 0;
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_lock = 0;
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_pipeline_depth = 0;
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_bytes_delivered = 0;
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_pending = MCA_PML_BFO_SEND_PENDING_NONE;
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_send.req_base.req_sequence = OPAL_THREAD_ADD32(
./mca/pml/bfo/pml_bfo_sendreq.h:        &comm->procs[sendreq->req_send.req_base.req_peer].send_sequence,1);
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_restartseq = 0;      /* counts up restarts */
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_restart = 0;         /* reset in case we restart again */
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_error = 0;           /* clear error state */
./mca/pml/bfo/pml_bfo_sendreq.h:    sendreq->req_events = 0;          /* clear events, probably 0 anyways */
./mca/pml/bfo/pml_bfo_sendreq.h:    MCA_PML_BASE_SEND_START( &sendreq->req_send.req_base );
./mca/pml/bfo/pml_bfo_cuda.c:    sendreq->req_send.req_base.req_convertor.flags &= ~CONVERTOR_CUDA;
./mca/pml/bfo/pml_bfo_cuda.c:    if (opal_convertor_need_buffers(&sendreq->req_send.req_base.req_convertor) == false) {
./mca/pml/bfo/pml_bfo_cuda.c:        opal_convertor_get_current_pointer( &sendreq->req_send.req_base.req_convertor, (void**)&base );
./mca/pml/bfo/pml_bfo_cuda.c:        sendreq->req_send.req_base.req_convertor.flags |= CONVERTOR_CUDA;
./mca/pml/bfo/pml_bfo_cuda.c:        if( 0 != (sendreq->req_rdma_cnt = (uint32_t)mca_pml_bfo_rdma_cuda_btls(
./mca/pml/bfo/pml_bfo_cuda.c:                                                                           sendreq->req_endpoint,
./mca/pml/bfo/pml_bfo_cuda.c:                                                                           sendreq->req_send.req_bytes_packed,
./mca/pml/bfo/pml_bfo_cuda.c:                                                                           sendreq->req_rdma))) {
./mca/pml/bfo/pml_bfo_cuda.c:                                                     sendreq->req_send.req_bytes_packed);
./mca/pml/bfo/pml_bfo_cuda.c:        sendreq->req_send.req_base.req_convertor.flags |= CONVERTOR_CUDA;
./mca/pml/bfo/pml_bfo_cuda.c:    if ((recvreq->req_recv.req_base.req_convertor.flags & CONVERTOR_CUDA) &&
./mca/pml/bfo/pml_bfo_cuda.c:        recvreq->req_recv.req_base.req_convertor.flags &= ~CONVERTOR_CUDA;
./mca/pml/bfo/pml_bfo_cuda.c:        if(opal_convertor_need_buffers(&recvreq->req_recv.req_base.req_convertor) == true) {
./mca/pml/bfo/pml_bfo_cuda.c:            recvreq->req_recv.req_base.req_convertor.flags |= CONVERTOR_CUDA;
./mca/pml/bfo/pml_bfo_cuda.c:            recvreq->req_recv.req_base.req_convertor.flags |= CONVERTOR_CUDA;
./mca/pml/bfo/pml_bfo_iprobe.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_IMPROBE;
./mca/pml/bfo/pml_bfo_iprobe.c:    if( recvreq->req_recv.req_base.req_ompi.req_complete == true ) {
./mca/pml/bfo/pml_bfo_iprobe.c:            *status = recvreq->req_recv.req_base.req_ompi.req_status;
./mca/pml/bfo/pml_bfo_iprobe.c:        (*message)->peer = recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE;
./mca/pml/bfo/pml_bfo_iprobe.c:        (*message)->count = recvreq->req_recv.req_base.req_ompi.req_status._ucount;
./mca/pml/bfo/pml_bfo_iprobe.c:        rc = recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/bfo/pml_bfo_iprobe.c:    recvreq->req_recv.req_base.req_type = MCA_PML_REQUEST_MPROBE;
./mca/pml/bfo/pml_bfo_iprobe.c:    ompi_request_wait_completion(&recvreq->req_recv.req_base.req_ompi);
./mca/pml/bfo/pml_bfo_iprobe.c:    rc = recvreq->req_recv.req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/bfo/pml_bfo_iprobe.c:        *status = recvreq->req_recv.req_base.req_ompi.req_status;
./mca/pml/bfo/pml_bfo_iprobe.c:    (*message)->peer = recvreq->req_recv.req_base.req_ompi.req_status.MPI_SOURCE;
./mca/pml/bfo/pml_bfo_iprobe.c:    (*message)->count = recvreq->req_recv.req_base.req_ompi.req_status._ucount;
./mca/pml/base/pml_base_request.c:    req->req_ompi.req_type = OMPI_REQUEST_PML;
./mca/pml/base/pml_base_bsend.c:    if(sendreq->req_bytes_packed > 0) {
./mca/pml/base/pml_base_bsend.c:            sendreq->req_addr = NULL;
./mca/pml/base/pml_base_bsend.c:        sendreq->req_addr = mca_pml_bsend_allocator->alc_alloc(
./mca/pml/base/pml_base_bsend.c:            mca_pml_bsend_allocator, sendreq->req_bytes_packed, 0);
./mca/pml/base/pml_base_bsend.c:        if(NULL == sendreq->req_addr) {
./mca/pml/base/pml_base_bsend.c:            sendreq->req_base.req_pml_complete = true;
./mca/pml/base/pml_base_bsend.c:        iov.iov_base = (IOVBASE_TYPE*)sendreq->req_addr;
./mca/pml/base/pml_base_bsend.c:        iov.iov_len = sendreq->req_bytes_packed;
./mca/pml/base/pml_base_bsend.c:        if((rc = opal_convertor_pack( &sendreq->req_base.req_convertor,
./mca/pml/base/pml_base_bsend.c:        opal_convertor_prepare_for_send( &sendreq->req_base.req_convertor, &(ompi_mpi_packed.dt.super),
./mca/pml/base/pml_base_bsend.c:                                         max_data, sendreq->req_addr );
./mca/pml/base/pml_base_bsend.c:    assert( sendreq->req_bytes_packed > 0 );
./mca/pml/base/pml_base_bsend.c:        sendreq->req_addr = NULL;
./mca/pml/base/pml_base_bsend.c:    sendreq->req_addr = mca_pml_bsend_allocator->alc_alloc(
./mca/pml/base/pml_base_bsend.c:        mca_pml_bsend_allocator, sendreq->req_bytes_packed, 0);
./mca/pml/base/pml_base_bsend.c:    if(NULL == sendreq->req_addr) {
./mca/pml/base/pml_base_bsend.c:        sendreq->req_base.req_pml_complete = true;
./mca/pml/base/pml_base_bsend.c:    if(sendreq->req_bytes_packed == 0 ||
./mca/pml/base/pml_base_bsend.c:       sendreq->req_addr == NULL ||
./mca/pml/base/pml_base_bsend.c:       sendreq->req_addr == sendreq->req_base.req_addr)
./mca/pml/base/pml_base_bsend.c:    mca_pml_bsend_allocator->alc_free(mca_pml_bsend_allocator, (void *)sendreq->req_addr);
./mca/pml/base/pml_base_bsend.c:    sendreq->req_addr = sendreq->req_base.req_addr;
./mca/pml/cm/pml_cm_request.c:    OBJ_CONSTRUCT(&req->req_convertor, opal_convertor_t);
./mca/pml/cm/pml_cm_request.c:    req->req_ompi.req_type = OMPI_REQUEST_PML;
./mca/pml/cm/pml_cm_request.c:    OBJ_DESTRUCT(&req->req_convertor);
./mca/pml/cm/pml_cm.h:    sendreq->req_send.req_base.req_pml_complete = true;
./mca/pml/cm/pml_cm.h:    ompi_request_wait_completion(&recvreq->req_base.req_ompi);
./mca/pml/cm/pml_cm.h:        *status = recvreq->req_base.req_ompi.req_status;
./mca/pml/cm/pml_cm.h:    ret = recvreq->req_base.req_ompi.req_status.MPI_ERROR;
./mca/pml/cm/pml_cm_recvreq.c:    assert( false == recvreq->req_free_called );
./mca/pml/cm/pml_cm_recvreq.c:    recvreq->req_free_called = true;
./mca/pml/cm/pml_cm_recvreq.c:    if( true == recvreq->req_pml_complete ) {
./mca/pml/cm/pml_cm_recvreq.c:        if( MCA_PML_CM_REQUEST_RECV_THIN == recvreq->req_pml_type ) {
./mca/pml/cm/pml_cm_recvreq.c:    recvreq->req_base.req_ompi.req_free = mca_pml_cm_recv_request_free;
./mca/pml/cm/pml_cm_recvreq.c:    recvreq->req_base.req_ompi.req_cancel = mca_pml_cm_cancel;
./mca/pml/cm/pml_cm_recvreq.c:    OBJ_CONSTRUCT( &(recvreq->req_base.req_convertor), opal_convertor_t );
./mca/pml/cm/pml_cm_recvreq.h:    recvreq->req_base.req_pml_type = MCA_PML_CM_REQUEST_RECV_THIN;             \
./mca/pml/cm/pml_cm_recvreq.h:    recvreq->req_mtl.ompi_req = (ompi_request_t*) recvreq;                     \
./mca/pml/cm/pml_cm_recvreq.h:    recvreq->req_mtl.completion_callback = mca_pml_cm_recv_request_completion; \
./mca/pml/cm/pml_cm_recvreq.h:    recvreq->req_base.req_pml_type = MCA_PML_CM_REQUEST_RECV_HEAVY;            \
./mca/pml/cm/pml_cm_recvreq.h:    recvreq->req_mtl.ompi_req = (ompi_request_t*) recvreq;                     \
./mca/pml/cm/pml_cm_recvreq.h:    recvreq->req_mtl.completion_callback = mca_pml_cm_recv_request_completion; \
./mca/pml/cm/pml_cm_recvreq.h:                              &recvreq->req_base.req_convertor,         \
./mca/pml/cm/pml_cm_recvreq.h:                              &recvreq->req_mtl));                      \
./mca/pml/cm/pml_cm_recvreq.h:                               &recvreq->req_base.req_convertor,        \
./mca/pml/cm/pml_cm_recvreq.h:                               &recvreq->req_mtl));                     \
./mca/pml/cm/pml_cm_recvreq.h:                              &recvreq->req_base.req_convertor,         \
./mca/pml/cm/pml_cm_recvreq.h:                              &recvreq->req_mtl));                      \
./mca/pml/cm/pml_cm_recvreq.h:    ompi_request_complete(  &(recvreq->req_base.req_ompi), true );      \
./mca/pml/cm/pml_cm_recvreq.h:    assert( false == recvreq->req_base.req_pml_complete );              \
./mca/pml/cm/pml_cm_recvreq.h:    if( true == recvreq->req_base.req_free_called ) {                   \
./mca/pml/cm/pml_cm_recvreq.h:        recvreq->req_base.req_pml_complete = true;                      \
./mca/pml/cm/pml_cm_recvreq.h:        ompi_request_complete( &(recvreq->req_base.req_ompi), true );   \
./mca/pml/cm/pml_cm_recvreq.h:    assert( false == recvreq->req_base.req_pml_complete );              \
./mca/pml/cm/pml_cm_recvreq.h:    if( true == recvreq->req_base.req_free_called ) {                   \
./mca/pml/cm/pml_cm_recvreq.h:        if(recvreq->req_base.req_ompi.req_persistent) {                 \
./mca/pml/cm/pml_cm_recvreq.h:            opal_convertor_set_position(&recvreq->req_base.req_convertor, &offset); \
./mca/pml/cm/pml_cm_recvreq.h:        recvreq->req_base.req_pml_complete = true;                      \
./mca/pml/cm/pml_cm_recvreq.h:        ompi_request_complete(  &(recvreq->req_base.req_ompi), true );  \
./mca/pml/cm/pml_cm_sendreq.c:    assert( false == sendreq->req_base.req_free_called );
./mca/pml/cm/pml_cm_sendreq.c:    sendreq->req_base.req_free_called = true;
./mca/pml/cm/pml_cm_sendreq.c:    if( true == sendreq->req_base.req_pml_complete ) {
./mca/pml/cm/pml_cm_sendreq.c:        if( MCA_PML_CM_REQUEST_SEND_THIN == sendreq->req_base.req_pml_type ) {
./mca/pml/cm/pml_cm_sendreq.c:    sendreq->req_send.req_base.req_ompi.req_free = mca_pml_cm_send_request_free;
./mca/pml/cm/pml_cm_sendreq.c:    sendreq->req_send.req_base.req_ompi.req_cancel = mca_pml_cm_cancel;
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_send.req_base.req_pml_type = MCA_PML_CM_REQUEST_SEND_THIN; \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_mtl.ompi_req = (ompi_request_t*) sendreq;          \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_mtl.completion_callback = mca_pml_cm_send_request_completion; \
./mca/pml/cm/pml_cm_sendreq.h:    sendreq->req_send.req_base.req_pml_type = MCA_PML_CM_REQUEST_SEND_THIN; \
./mca/pml/cm/pml_cm_sendreq.h:    sendreq->req_mtl.ompi_req = (ompi_request_t*) sendreq;              \
./mca/pml/cm/pml_cm_sendreq.h:    sendreq->req_mtl.completion_callback = mca_pml_cm_send_request_completion; \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_send.req_base.req_pml_type = MCA_PML_CM_REQUEST_SEND_HEAVY; \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_mtl.ompi_req = (ompi_request_t*) sendreq;          \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_mtl.completion_callback = mca_pml_cm_send_request_completion; \
./mca/pml/cm/pml_cm_sendreq.h:    sendreq->req_send.req_base.req_pml_type = MCA_PML_CM_REQUEST_SEND_HEAVY; \
./mca/pml/cm/pml_cm_sendreq.h:    sendreq->req_mtl.ompi_req = (ompi_request_t*) sendreq;              \
./mca/pml/cm/pml_cm_sendreq.h:    sendreq->req_mtl.completion_callback = mca_pml_cm_send_request_completion; \
./mca/pml/cm/pml_cm_sendreq.h:        OMPI_REQUEST_INIT(&(sendreq->req_send.req_base.req_ompi),       \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_tag = tag;                                         \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_peer = dst;                                        \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_addr = buf;                                        \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_count = count;                                     \
./mca/pml/cm/pml_cm_sendreq.h:        MCA_PML_CM_HVY_SEND_REQUEST_INIT_COMMON( (&sendreq->req_send),  \
./mca/pml/cm/pml_cm_sendreq.h:                                       &sendreq->req_send.req_base.req_convertor, \
./mca/pml/cm/pml_cm_sendreq.h:                                       &sendreq->req_count );           \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_blocking = blocking;                               \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_send.req_base.req_pml_complete =                   \
./mca/pml/cm/pml_cm_sendreq.h:        OMPI_REQUEST_INIT(&(sendreq->req_send.req_base.req_ompi),       \
./mca/pml/cm/pml_cm_sendreq.h:        MCA_PML_CM_SEND_REQUEST_INIT_COMMON( (&sendreq->req_send),      \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_send.req_base.req_pml_complete = false;            \
./mca/pml/cm/pml_cm_sendreq.h:                              &sendreq->req_send.req_base.req_convertor, \
./mca/pml/cm/pml_cm_sendreq.h:                              &sendreq->req_mtl));                      \
./mca/pml/cm/pml_cm_sendreq.h:    if(sendreq->req_count > 0) {                                        \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_buff =                                             \
./mca/pml/cm/pml_cm_sendreq.h:            mca_pml_base_bsend_request_alloc_buf(sendreq->req_count);   \
./mca/pml/cm/pml_cm_sendreq.h:        if (NULL == sendreq->req_buff) {                                \
./mca/pml/cm/pml_cm_sendreq.h:            iov.iov_base = (IOVBASE_TYPE*)sendreq->req_buff;            \
./mca/pml/cm/pml_cm_sendreq.h:            max_data = iov.iov_len = sendreq->req_count;                \
./mca/pml/cm/pml_cm_sendreq.h:            opal_convertor_pack( &sendreq->req_send.req_base.req_convertor, \
./mca/pml/cm/pml_cm_sendreq.h:            opal_convertor_prepare_for_send( &sendreq->req_send.req_base.req_convertor, \
./mca/pml/cm/pml_cm_sendreq.h:                                             max_data, sendreq->req_buff ); \
./mca/pml/cm/pml_cm_sendreq.h:    if (sendreq->req_send.req_send_mode == MCA_PML_BASE_SEND_BUFFERED) {         \
./mca/pml/cm/pml_cm_sendreq.h:                                  sendreq->req_send.req_base.req_comm,           \
./mca/pml/cm/pml_cm_sendreq.h:                                  sendreq->req_peer,                             \
./mca/pml/cm/pml_cm_sendreq.h:                                  sendreq->req_tag,                              \
./mca/pml/cm/pml_cm_sendreq.h:                                  &sendreq->req_send.req_base.req_convertor,     \
./mca/pml/cm/pml_cm_sendreq.h:                                  sendreq->req_send.req_send_mode,               \
./mca/pml/cm/pml_cm_sendreq.h:                                  sendreq->req_blocking,                         \
./mca/pml/cm/pml_cm_sendreq.h:                                  &sendreq->req_mtl));                           \
./mca/pml/cm/pml_cm_sendreq.h:           sendreq->req_send.req_send_mode == MCA_PML_BASE_SEND_BUFFERED) {      \
./mca/pml/cm/pml_cm_sendreq.h:            sendreq->req_send.req_base.req_ompi.req_status.MPI_ERROR = 0;        \
./mca/pml/cm/pml_cm_sendreq.h:    assert( false == sendreq->req_send.req_base.req_pml_complete );                \
./mca/pml/cm/pml_cm_sendreq.h:    if (sendreq->req_send.req_send_mode == MCA_PML_BASE_SEND_BUFFERED &&           \
./mca/pml/cm/pml_cm_sendreq.h:        sendreq->req_count > 0 ) {                                                 \
./mca/pml/cm/pml_cm_sendreq.h:        mca_pml_base_bsend_request_free(sendreq->req_buff);                        \
./mca/pml/cm/pml_cm_sendreq.h:    if( !REQUEST_COMPLETE(&sendreq->req_send.req_base.req_ompi)) {                 \
./mca/pml/cm/pml_cm_sendreq.h:        ompi_request_complete(&(sendreq->req_send.req_base.req_ompi), true);       \
./mca/pml/cm/pml_cm_sendreq.h:    sendreq->req_send.req_base.req_pml_complete = true;                            \
./mca/pml/cm/pml_cm_sendreq.h:    if( sendreq->req_send.req_base.req_free_called ) {                             \
./mca/pml/cm/pml_cm_sendreq.h:        if(sendreq->req_send.req_base.req_ompi.req_persistent) {                   \
./mca/pml/cm/pml_cm_sendreq.h:            opal_convertor_set_position(&sendreq->req_send.req_base.req_convertor, \
./mca/pml/cm/pml_cm_sendreq.h:        OBJ_RELEASE(sendreq->req_send.req_base.req_datatype);           \
./mca/pml/cm/pml_cm_sendreq.h:        OBJ_RELEASE(sendreq->req_send.req_base.req_comm);               \
./mca/pml/cm/pml_cm_sendreq.h:        OMPI_REQUEST_FINI(&sendreq->req_send.req_base.req_ompi);        \
./mca/pml/cm/pml_cm_sendreq.h:        opal_convertor_cleanup( &(sendreq->req_send.req_base.req_convertor) ); \
./mca/pml/cm/pml_cm_sendreq.h:    assert( false == sendreq->req_send.req_base.req_pml_complete );          \
./mca/pml/cm/pml_cm_sendreq.h:    if( !REQUEST_COMPLETE(&sendreq->req_send.req_base.req_ompi)) {           \
./mca/pml/cm/pml_cm_sendreq.h:        ompi_request_complete(&(sendreq->req_send.req_base.req_ompi), true); \
./mca/pml/cm/pml_cm_sendreq.h:    sendreq->req_send.req_base.req_pml_complete = true;                      \
./mca/pml/cm/pml_cm_sendreq.h:    if( sendreq->req_send.req_base.req_free_called ) {                       \
./mca/pml/cm/pml_cm_sendreq.h:        OBJ_RELEASE(sendreq->req_send.req_base.req_datatype);           \
./mca/pml/cm/pml_cm_sendreq.h:        OBJ_RELEASE(sendreq->req_send.req_base.req_comm);               \
./mca/pml/cm/pml_cm_sendreq.h:        OMPI_REQUEST_FINI(&sendreq->req_send.req_base.req_ompi);        \
./mca/pml/cm/pml_cm_sendreq.h:        opal_convertor_cleanup( &(sendreq->req_send.req_base.req_convertor) ); \
./mca/pml/cm/pml_cm_start.c:                if (!sendreq->req_send.req_base.req_pml_complete) {
./mca/pml/cm/pml_cm_start.c:                    rc = mca_pml_cm_isend_init (sendreq->req_addr,
./mca/pml/cm/pml_cm_start.c:                                                sendreq->req_count,
./mca/pml/cm/pml_cm_start.c:                                                sendreq->req_send.req_base.req_datatype,
./mca/pml/cm/pml_cm_start.c:                                                sendreq->req_peer,
./mca/pml/cm/pml_cm_start.c:                                                sendreq->req_tag,
./mca/pml/cm/pml_cm_start.c:                                                sendreq->req_send.req_send_mode,
./mca/pml/cm/pml_cm_start.c:                                                sendreq->req_send.req_base.req_comm,
./mca/pml/cm/pml_cm_start.c:                sendreq->req_send.req_base.req_pml_complete = false;
./mca/pml/yalla/pml_yalla_request.c:    if (req->convertor != NULL) {
./mca/pml/yalla/pml_yalla_request.c:        mca_pml_yalla_convertor_free(req->convertor);
./mca/pml/yalla/pml_yalla_request.c:        req->convertor = NULL;
./mca/pml/yalla/pml_yalla_request.c:    OBJ_RELEASE(req->ompi.req_mpi_object.comm);
./mca/pml/yalla/pml_yalla_request.c:    req->ompi.req_state = OMPI_REQUEST_INVALID;
./mca/pml/yalla/pml_yalla_request.c:    PML_YALLA_FREELIST_RETURN(fl, &req->ompi.super);
./mca/pml/yalla/pml_yalla_request.c:         req->flags |= MCA_PML_YALLA_REQUEST_FLAG_FREE_CALLED;
./mca/pml/yalla/pml_yalla_request.c:    if (mca_pml_yalla_check_request_state(&sreq->super, PML_YALLA_MXM_REQBASE(sreq))) {
./mca/pml/yalla/pml_yalla_request.c:        mca_pml_yalla_request_release(&sreq->super, &ompi_pml_yalla.send_reqs);
./mca/pml/yalla/pml_yalla_request.c:    error = mxm_req_cancel_send(&sreq->mxm);
./mca/pml/yalla/pml_yalla_request.c:    if (mca_pml_yalla_check_request_state(&rreq->super, PML_YALLA_MXM_REQBASE(rreq))) {
./mca/pml/yalla/pml_yalla_request.c:        mca_pml_yalla_request_release(&rreq->super, &ompi_pml_yalla.recv_reqs);
./mca/pml/yalla/pml_yalla_request.c:    error = mxm_req_cancel_recv(&rreq->mxm);
./mca/pml/yalla/pml_yalla_request.c:    init_mxm_base_req(&mxm_sreq->base);
./mca/pml/yalla/pml_yalla_request.c:    mxm_sreq->opcode           = MXM_REQ_OP_SEND;
./mca/pml/yalla/pml_yalla_request.c:    mxm_sreq->op.send.imm_data = 0;
./mca/pml/yalla/pml_yalla_request.c:    mxm_sreq->op.send.tag      = 0;
./mca/pml/yalla/pml_yalla_request.c:    mxm_sreq->flags            = MXM_REQ_SEND_FLAG_REENTRANT;
./mca/pml/yalla/pml_yalla_request.c:    mxm_sreq->flags            = 0;
./mca/pml/yalla/pml_yalla_request.c:    init_mxm_base_req(&mxm_rreq->base);
./mca/pml/yalla/pml_yalla_request.c:    mxm_rreq->tag             = 0;
./mca/pml/yalla/pml_yalla_request.c:    mxm_rreq->tag_mask        = 0x7fffffff;
./mca/pml/yalla/pml_yalla_request.c:    OMPI_REQUEST_INIT(&req->ompi, false);
./mca/pml/yalla/pml_yalla_request.c:    req->ompi.req_type             = OMPI_REQUEST_PML;
./mca/pml/yalla/pml_yalla_request.c:    req->ompi.req_cancel           = NULL;
./mca/pml/yalla/pml_yalla_request.c:    req->ompi.req_complete_cb      = NULL;
./mca/pml/yalla/pml_yalla_request.c:    req->ompi.req_complete_cb_data = NULL;
./mca/pml/yalla/pml_yalla_request.c:    req->convertor                  = NULL;
./mca/pml/yalla/pml_yalla_request.c:    switch (sreq->mxm.base.error) {
./mca/pml/yalla/pml_yalla_request.c:        sreq->super.ompi.req_status.MPI_ERROR  = OMPI_SUCCESS;
./mca/pml/yalla/pml_yalla_request.c:        sreq->super.ompi.req_status._cancelled = true;
./mca/pml/yalla/pml_yalla_request.c:        sreq->super.ompi.req_status.MPI_ERROR  = MPI_ERR_INTERN;
./mca/pml/yalla/pml_yalla_request.c:                   mxm_error_string(sreq->mxm.base.error));
./mca/pml/yalla/pml_yalla_request.c:    ompi_request_complete(&sreq->super.ompi, true);
./mca/pml/yalla/pml_yalla_request.c:    if (sreq->super.flags & MCA_PML_YALLA_REQUEST_FLAG_FREE_CALLED) {
./mca/pml/yalla/pml_yalla_request.c:        mca_pml_yalla_request_release(&sreq->super, &ompi_pml_yalla.send_reqs);
./mca/pml/yalla/pml_yalla_request.c:                      mxm_error_string(bsreq->mxm.base.error));
./mca/pml/yalla/pml_yalla_request.c:    mca_pml_base_bsend_request_free(bsreq->mxm.base.data.buffer.ptr);
./mca/pml/yalla/pml_yalla_request.c:    PML_YALLA_FREELIST_RETURN(&ompi_pml_yalla.bsend_reqs, &bsreq->super);
./mca/pml/yalla/pml_yalla_request.c:    PML_YALLA_SET_RECV_STATUS(&rreq->mxm, rreq->mxm.completion.actual_len,
./mca/pml/yalla/pml_yalla_request.c:                              &rreq->super.ompi.req_status);
./mca/pml/yalla/pml_yalla_request.c:                      (void *)rreq, mxm_error_string(rreq->mxm.base.error),
./mca/pml/yalla/pml_yalla_request.c:                      rreq->mxm.completion.sender_imm, rreq->mxm.completion.sender_tag,
./mca/pml/yalla/pml_yalla_request.c:                      rreq->mxm.tag, rreq->mxm.tag_mask,
./mca/pml/yalla/pml_yalla_request.c:                      rreq->mxm.completion.actual_len);
./mca/pml/yalla/pml_yalla_request.c:    ompi_request_complete(&rreq->super.ompi, true);
./mca/pml/yalla/pml_yalla_request.c:    if (rreq->super.flags & MCA_PML_YALLA_REQUEST_FLAG_FREE_CALLED) {
./mca/pml/yalla/pml_yalla_request.c:        mca_pml_yalla_request_release(&rreq->super, &ompi_pml_yalla.recv_reqs);
./mca/pml/yalla/pml_yalla_request.c:    init_base_req(&sreq->super);
./mca/pml/yalla/pml_yalla_request.c:    init_mxm_send_req(&sreq->mxm);
./mca/pml/yalla/pml_yalla_request.c:    sreq->super.ompi.req_free   = mca_pml_yalla_send_request_free;
./mca/pml/yalla/pml_yalla_request.c:    sreq->super.ompi.req_cancel = mca_pml_yalla_send_request_cancel;
./mca/pml/yalla/pml_yalla_request.c:    sreq->mxm.base.context      = sreq;
./mca/pml/yalla/pml_yalla_request.c:    sreq->mxm.base.completed_cb = mca_pml_yalla_send_completion_cb;
./mca/pml/yalla/pml_yalla_request.c:    OMPI_REQUEST_FINI(&sreq->super.ompi);
./mca/pml/yalla/pml_yalla_request.c:    init_mxm_send_req(&bsreq->mxm);
./mca/pml/yalla/pml_yalla_request.c:    bsreq->mxm.base.context      = bsreq;
./mca/pml/yalla/pml_yalla_request.c:    bsreq->mxm.base.completed_cb = mca_pml_yalla_bsend_completion_cb;
./mca/pml/yalla/pml_yalla_request.c:    init_base_req(&rreq->super);
./mca/pml/yalla/pml_yalla_request.c:    init_mxm_recv_req(&rreq->mxm);
./mca/pml/yalla/pml_yalla_request.c:    rreq->super.ompi.req_free   = mca_pml_yalla_recv_request_free;
./mca/pml/yalla/pml_yalla_request.c:    rreq->super.ompi.req_cancel = mca_pml_yalla_recv_request_cancel;
./mca/pml/yalla/pml_yalla_request.c:    rreq->mxm.base.context      = rreq;
./mca/pml/yalla/pml_yalla_request.c:    rreq->mxm.base.completed_cb = mca_pml_yalla_recv_completion_cb;
./mca/pml/yalla/pml_yalla_request.c:    OMPI_REQUEST_FINI(&rreq->super.ompi);
./mca/pml/yalla/pml_yalla.c:    rreq->super.ompi.req_persistent = true;
./mca/pml/yalla/pml_yalla.c:    rreq->super.flags = 0;
./mca/pml/yalla/pml_yalla.c:    *request = &rreq->super.ompi;
./mca/pml/yalla/pml_yalla.c:    rreq->super.ompi.req_persistent = false;
./mca/pml/yalla/pml_yalla.c:    rreq->super.flags = 0;
./mca/pml/yalla/pml_yalla.c:    error = mxm_req_recv(&rreq->mxm);
./mca/pml/yalla/pml_yalla.c:    *request = &rreq->super.ompi;
./mca/pml/yalla/pml_yalla.c:    sreq->super.ompi.req_persistent = true;
./mca/pml/yalla/pml_yalla.c:    sreq->super.flags = MCA_PML_YALLA_REQUEST_FLAG_SEND;
./mca/pml/yalla/pml_yalla.c:        sreq->super.flags |= MCA_PML_YALLA_REQUEST_FLAG_BSEND;
./mca/pml/yalla/pml_yalla.c:    *request = &sreq->super.ompi;
./mca/pml/yalla/pml_yalla.c:    bsreq->mxm.base.state     = mxm_sreq->base.state;
./mca/pml/yalla/pml_yalla.c:    bsreq->mxm.base.mq        = mxm_sreq->base.mq;
./mca/pml/yalla/pml_yalla.c:    bsreq->mxm.base.conn      = mxm_sreq->base.conn;
./mca/pml/yalla/pml_yalla.c:    bsreq->mxm.base.data_type = MXM_REQ_DATA_BUFFER;
./mca/pml/yalla/pml_yalla.c:    switch (mxm_sreq->base.data_type) {
./mca/pml/yalla/pml_yalla.c:        length = mxm_sreq->base.data.buffer.length;
./mca/pml/yalla/pml_yalla.c:        bsreq->mxm.base.data.buffer.ptr = mca_pml_base_bsend_request_alloc_buf(length);
./mca/pml/yalla/pml_yalla.c:        bsreq->mxm.base.data.buffer.length = length;
./mca/pml/yalla/pml_yalla.c:        memcpy(bsreq->mxm.base.data.buffer.ptr, mxm_sreq->base.data.buffer.ptr, length);
./mca/pml/yalla/pml_yalla.c:        length = mxm_sreq->base.data.stream.length;
./mca/pml/yalla/pml_yalla.c:        bsreq->mxm.base.data.buffer.ptr = mca_pml_base_bsend_request_alloc_buf(length);
./mca/pml/yalla/pml_yalla.c:        bsreq->mxm.base.data.buffer.length = length;
./mca/pml/yalla/pml_yalla.c:        mxm_sreq->base.data.stream.cb(bsreq->mxm.base.data.buffer.ptr, length,
./mca/pml/yalla/pml_yalla.c:                                      0, mxm_sreq->base.context);
./mca/pml/yalla/pml_yalla.c:    bsreq->mxm.opcode         = mxm_sreq->opcode;
./mca/pml/yalla/pml_yalla.c:    bsreq->mxm.flags          = mxm_sreq->flags;
./mca/pml/yalla/pml_yalla.c:    bsreq->mxm.op.send        = mxm_sreq->op.send;
./mca/pml/yalla/pml_yalla.c:    error = mxm_req_send(&bsreq->mxm);
./mca/pml/yalla/pml_yalla.c:    mxm_sreq->base.state = MXM_REQ_COMPLETED;
./mca/pml/yalla/pml_yalla.c:    sreq->super.ompi.req_persistent = false;
./mca/pml/yalla/pml_yalla.c:    sreq->super.flags = 0;
./mca/pml/yalla/pml_yalla.c:        rc = mca_pml_yalla_bsend(&sreq->mxm);
./mca/pml/yalla/pml_yalla.c:        sreq->super.ompi.req_status.MPI_ERROR = rc;
./mca/pml/yalla/pml_yalla.c:        ompi_request_complete(&sreq->super.ompi, true);
./mca/pml/yalla/pml_yalla.c:        *request = &sreq->super.ompi;
./mca/pml/yalla/pml_yalla.c:    error = mxm_req_send(&sreq->mxm);
./mca/pml/yalla/pml_yalla.c:    *request = &sreq->super.ompi;
./mca/pml/yalla/pml_yalla.c:    rreq->super.ompi.req_persistent = false;
./mca/pml/yalla/pml_yalla.c:    rreq->super.flags = 0;
./mca/pml/yalla/pml_yalla.c:    error = mxm_message_recv(&rreq->mxm, (*message)->req_ptr);
./mca/pml/yalla/pml_yalla.c:    *request = &rreq->super.ompi;
./mca/pml/yalla/pml_yalla.c:        if ((req == NULL) || (OMPI_REQUEST_PML != req->ompi.req_type)) {
./mca/pml/yalla/pml_yalla.c:        PML_YALLA_ASSERT(req->ompi.req_state != OMPI_REQUEST_INVALID);
./mca/pml/yalla/pml_yalla.c:        PML_YALLA_RESET_OMPI_REQ(&req->ompi, OMPI_REQUEST_ACTIVE);
./mca/pml/yalla/pml_yalla.c:        if (req->flags & MCA_PML_YALLA_REQUEST_FLAG_SEND) {
./mca/pml/yalla/pml_yalla.c:            if (req->flags & MCA_PML_YALLA_REQUEST_FLAG_BSEND) {
./mca/pml/yalla/pml_yalla.c:                rc = mca_pml_yalla_bsend(&sreq->mxm);
./mca/pml/yalla/pml_yalla.c:                sreq->super.ompi.req_status.MPI_ERROR = rc;
./mca/pml/yalla/pml_yalla.c:                ompi_request_complete(&sreq->super.ompi, true);
./mca/pml/yalla/pml_yalla.c:                error = mxm_req_send(&sreq->mxm);
./mca/pml/yalla/pml_yalla.c:            error = mxm_req_recv(&rreq->mxm);
./mca/pml/yalla/pml_yalla_datatype.c:    mxm_req->data_type      = MXM_REQ_DATA_STREAM;
./mca/pml/yalla/pml_yalla_datatype.c:    mxm_req->data.stream.cb = stream_cb;
./mca/pml/yalla/pml_yalla_datatype.c:    opal_convertor_get_packed_size(&convertor->convertor, &mxm_req->data.stream.length);
./mca/pml/yalla/pml_yalla_datatype.c:    return mca_pml_yalla_stream_unpack(buffer, length, offset, &req->convertor->convertor);
./mca/pml/yalla/pml_yalla_datatype.c:    return mca_pml_yalla_stream_pack(buffer, length, offset, &req->convertor->convertor);
./mca/pml/yalla/pml_yalla_datatype.c:    rreq->super.convertor = mca_pml_yalla_get_recv_convertor(buf, count, datatype);
./mca/pml/yalla/pml_yalla_datatype.c:    mca_pml_yalla_noncontig_req_init(mxm_req, rreq->super.convertor, mxm_pml_yalla_irecv_stream_cb);
./mca/pml/yalla/pml_yalla_datatype.c:    mxm_req->context = convertor;
./mca/pml/yalla/pml_yalla_datatype.c:    sreq->super.convertor = mca_pml_yalla_get_send_convertor(buf, count, datatype);
./mca/pml/yalla/pml_yalla_datatype.c:    mca_pml_yalla_noncontig_req_init(mxm_req, sreq->super.convertor, mxm_pml_yalla_isend_stream_cb);
./mca/pml/yalla/pml_yalla_datatype.c:    mxm_req->context = convertor;
./mca/pml/yalla/pml_yalla_request.h:    PML_YALLA_INIT_OMPI_REQ(&rreq->super.ompi, _comm, _state);
./mca/pml/yalla/pml_yalla_request.h:    PML_YALLA_INIT_MXM_RECV_REQ(&rreq->mxm, _buf, _count, _datatype, _src, _tag, _comm, irecv, rreq);
./mca/pml/yalla/pml_yalla_request.h:    PML_YALLA_INIT_OMPI_REQ(&sreq->super.ompi, _comm, _state);
./mca/pml/yalla/pml_yalla_request.h:    PML_YALLA_INIT_MXM_SEND_REQ(&sreq->mxm, _buf, _count, _datatype, _dst, _tag, _mode, _comm, isend, sreq);
./mca/pml/yalla/pml_yalla_request.h:    sreq->super.ompi.req_status.MPI_TAG    = _tag;
./mca/pml/yalla/pml_yalla_request.h:    sreq->super.ompi.req_status.MPI_SOURCE = (_comm)->c_my_rank;
./mca/pml/yalla/pml_yalla_request.h:    sreq->super.ompi.req_status._ucount    = _count;
./mca/pml/ucx/pml_ucx_request.h:    req->req_complete          = REQUEST_PENDING;
./mca/pml/ucx/pml_ucx_request.c:    mca_pml_ucx_set_send_status(&req->req_status, status);
./mca/pml/ucx/pml_ucx_request.c:    mca_pml_ucx_set_recv_status(&req->req_status, status, info);
./mca/pml/ucx/pml_ucx_request.c:    tmp_req->req_complete_cb_data = NULL;
./mca/pml/ucx/pml_ucx_request.c:    preq->tmp_req                 = NULL;
./mca/pml/ucx/pml_ucx_request.c:    preq->ompi.req_status = tmp_req->req_status;
./mca/pml/ucx/pml_ucx_request.c:    ompi_request_complete(&preq->ompi, true);
./mca/pml/ucx/pml_ucx_request.c:    preq = (mca_pml_ucx_persistent_request_t*)tmp_req->req_complete_cb_data;
./mca/pml/ucx/pml_ucx_request.c:        PML_UCX_ASSERT(preq->tmp_req != NULL);
./mca/pml/ucx/pml_ucx_request.c:    mca_pml_ucx_set_send_status(&tmp_req->req_status, status);
./mca/pml/ucx/pml_ucx_request.c:    mca_pml_ucx_set_recv_status(&tmp_req->req_status, status, info);
./mca/pml/ucx/pml_ucx_request.c:    ompi_req->req_type             = OMPI_REQUEST_PML;
./mca/pml/ucx/pml_ucx_request.c:    ompi_req->req_state            = state;
./mca/pml/ucx/pml_ucx_request.c:    ompi_req->req_free             = req_free;
./mca/pml/ucx/pml_ucx_request.c:    ompi_req->req_cancel           = req_cancel;
./mca/pml/ucx/pml_ucx_request.c:    ompi_req->req_state = OMPI_REQUEST_INVALID;
./mca/pml/ucx/pml_ucx_request.c:    ompi_request_t *tmp_req = preq->tmp_req;
./mca/pml/ucx/pml_ucx_request.c:    preq->ompi.req_state = OMPI_REQUEST_INVALID;
./mca/pml/ucx/pml_ucx_request.c:    PML_UCX_FREELIST_RETURN(&ompi_pml_ucx.persistent_reqs, &preq->ompi.super);
./mca/pml/ucx/pml_ucx_request.c:    if (preq->tmp_req != NULL) {
./mca/pml/ucx/pml_ucx_request.c:        ucp_request_cancel(ompi_pml_ucx.ucp_worker, preq->tmp_req);
./mca/pml/ucx/pml_ucx_request.c:    mca_pml_ucx_request_init_common(&req->ompi, true, OMPI_REQUEST_INACTIVE,
./mca/pml/ucx/pml_ucx_request.c:    req->tmp_req = NULL;
./mca/pml/ucx/pml_ucx_request.c:    req->ompi.req_state = OMPI_REQUEST_INVALID;
./mca/pml/ucx/pml_ucx_request.c:    OMPI_REQUEST_FINI(&req->ompi);
./mca/pml/ucx/pml_ucx.c:    req->ompi.req_state = OMPI_REQUEST_INACTIVE;
./mca/pml/ucx/pml_ucx.c:    req->flags          = 0;
./mca/pml/ucx/pml_ucx.c:    req->buffer         = buf;
./mca/pml/ucx/pml_ucx.c:    req->count          = count;
./mca/pml/ucx/pml_ucx.c:    req->datatype       = mca_pml_ucx_get_datatype(datatype);
./mca/pml/ucx/pml_ucx.c:    PML_UCX_MAKE_RECV_TAG(req->tag, req->recv.tag_mask, tag, src, comm);
./mca/pml/ucx/pml_ucx.c:    *request = &req->ompi;
./mca/pml/ucx/pml_ucx.c:    req->ompi.req_state = OMPI_REQUEST_INACTIVE;
./mca/pml/ucx/pml_ucx.c:    req->flags          = MCA_PML_UCX_REQUEST_FLAG_SEND;
./mca/pml/ucx/pml_ucx.c:    req->buffer         = (void *)buf;
./mca/pml/ucx/pml_ucx.c:    req->count          = count;
./mca/pml/ucx/pml_ucx.c:    req->datatype       = mca_pml_ucx_get_datatype(datatype);
./mca/pml/ucx/pml_ucx.c:    req->tag            = PML_UCX_MAKE_SEND_TAG(tag, comm);
./mca/pml/ucx/pml_ucx.c:    req->send.mode      = mode;
./mca/pml/ucx/pml_ucx.c:    req->send.ep        = ep;
./mca/pml/ucx/pml_ucx.c:    *request = &req->ompi;
./mca/pml/ucx/pml_ucx.c:        if ((preq == NULL) || (OMPI_REQUEST_PML != preq->ompi.req_type)) {
./mca/pml/ucx/pml_ucx.c:        PML_UCX_ASSERT(preq->ompi.req_state != OMPI_REQUEST_INVALID);
./mca/pml/ucx/pml_ucx.c:        preq->ompi.req_state = OMPI_REQUEST_ACTIVE;
./mca/pml/ucx/pml_ucx.c:        mca_pml_ucx_request_reset(&preq->ompi);
./mca/pml/ucx/pml_ucx.c:        if (preq->flags & MCA_PML_UCX_REQUEST_FLAG_SEND) {
./mca/pml/ucx/pml_ucx.c:            tmp_req = (ompi_request_t*)ucp_tag_send_nb(preq->send.ep, preq->buffer,
./mca/pml/ucx/pml_ucx.c:                                                       preq->count, preq->datatype,
./mca/pml/ucx/pml_ucx.c:                                                       preq->tag,
./mca/pml/ucx/pml_ucx.c:                                                       preq->buffer, preq->count,
./mca/pml/ucx/pml_ucx.c:                                                       preq->datatype, preq->tag,
./mca/pml/ucx/pml_ucx.c:                                                       preq->recv.tag_mask,
./mca/pml/ucx/pml_ucx.c:            PML_UCX_ASSERT(preq->flags & MCA_PML_UCX_REQUEST_FLAG_SEND);
./mca/pml/ucx/pml_ucx.c:            mca_pml_ucx_set_send_status(&preq->ompi.req_status, UCS_OK);
./mca/pml/ucx/pml_ucx.c:            ompi_request_complete(&preq->ompi, true);
./mca/pml/ucx/pml_ucx.c:                tmp_req->req_complete_cb_data = preq;
./mca/pml/ucx/pml_ucx.c:                preq->tmp_req                 = tmp_req;
./mca/pml/ucx/pml_ucx.c:                          (preq->flags & MCA_PML_UCX_REQUEST_FLAG_SEND) ? "send" : "recv",
./mca/common/ompio/common_ompio_file_write.c:    ompio_req->req_type = MCA_OMPIO_REQUEST_WRITE;
./mca/common/ompio/common_ompio_file_write.c:    ompio_req->req_ompi.req_state = OMPI_REQUEST_ACTIVE;
./mca/common/ompio/common_ompio_file_write.c:	ompio_req->req_ompi.req_status.MPI_ERROR = OMPI_SUCCESS;
./mca/common/ompio/common_ompio_file_write.c:	ompio_req->req_ompi.req_status._ucount = 0;
./mca/common/ompio/common_ompio_file_write.c:	ompi_request_complete (&ompio_req->req_ompi, false);
./mca/common/ompio/common_ompio_file_write.c:	ompio_req->req_ompi.req_status.MPI_ERROR = ret;
./mca/common/ompio/common_ompio_file_write.c:	ompio_req->req_ompi.req_status._ucount = status._ucount;
./mca/common/ompio/common_ompio_file_write.c:	ompi_request_complete (&ompio_req->req_ompi, false);
./mca/common/ompio/common_ompio_file_read.c:    ompio_req->req_type = MCA_OMPIO_REQUEST_READ;
./mca/common/ompio/common_ompio_file_read.c:    ompio_req->req_ompi.req_state = OMPI_REQUEST_ACTIVE;
./mca/common/ompio/common_ompio_file_read.c:	ompio_req->req_ompi.req_status.MPI_ERROR = OMPI_SUCCESS;
./mca/common/ompio/common_ompio_file_read.c:	ompio_req->req_ompi.req_status._ucount = 0;
./mca/common/ompio/common_ompio_file_read.c:	ompi_request_complete (&ompio_req->req_ompi, false);
./mca/common/ompio/common_ompio_file_read.c:	ompio_req->req_ompi.req_status.MPI_ERROR = ret;
./mca/common/ompio/common_ompio_file_read.c:	ompio_req->req_ompi.req_status._ucount = status._ucount;
./mca/common/ompio/common_ompio_file_read.c:	ompi_request_complete (&ompio_req->req_ompi, false);
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:        ompi_request_complete(&ci->req->super, true);
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    if( NULL != req->ci )
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:        req->ci->req = NULL;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->ci = NULL;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    OMPI_REQUEST_FINI(&req->super);
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    assert( req->ci != NULL );
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    assert( req->ci->status == COMPLETED );
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    rc = mca_coll_ftbasic_agreement_era_complete_agreement(req->agreement_id, req->contrib, req->group);
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->ci = NULL;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_status.MPI_ERROR = rc;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    OMPI_REQUEST_INIT(&req->super, false);
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    assert(MPI_UNDEFINED == req->super.req_f_to_c_index);
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_state = OMPI_REQUEST_ACTIVE;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_type = OMPI_REQUEST_COLL;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_status.MPI_SOURCE = MPI_ANY_SOURCE;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_status.MPI_ERROR = MPI_SUCCESS;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_status.MPI_TAG = MPI_ANY_TAG;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_status._ucount = 0;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_status._cancelled = 0;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_mpi_object.comm = comm;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_complete_cb_data = NULL;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_free = era_iagree_req_free;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_cancel = NULL; /**< Don't know how to cancel an immediate agreement */
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->super.req_complete_cb = era_iagree_req_complete_cb;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->agreement_id = agreement_id;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->contrib = contrib;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->group = group;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    req->ci = ci;
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:        ompi_request_complete(&req->super, true);
./mca/coll/ftbasic/coll_ftbasic_agreement_earlyreturning.c:    *request = &req->super;
./mca/coll/libnbc/coll_libnbc.h:        OMPI_REQUEST_INIT(&req->super, false);                          \
./mca/coll/libnbc/coll_libnbc.h:        req->super.req_mpi_object.comm = comm;                          \
./mca/coll/libnbc/coll_libnbc.h:        req->super.req_complete = false;                                \
./mca/coll/libnbc/coll_libnbc.h:        req->super.req_state = OMPI_REQUEST_ACTIVE;                     \
./mca/coll/portals4/coll_portals4_request.h:                OMPI_REQUEST_INIT(&req->super, false);                    \
./mca/coll/portals4/coll_portals4_request.h:                req->super.req_mpi_object.comm = comm;                    \
./mca/coll/portals4/coll_portals4_request.h:                req->super.req_complete = false;                          \
./mca/coll/portals4/coll_portals4_request.h:                req->super.req_state = OMPI_REQUEST_ACTIVE;               \
./mca/coll/hcoll/coll_hcoll_rte.c:    req->data = (void *)ompi_req;
./mca/coll/hcoll/coll_hcoll_rte.c:    req->status = HCOLRTE_REQUEST_ACTIVE;
./mca/coll/hcoll/coll_hcoll_rte.c:    req->data = (void *)ompi_req;
./mca/coll/hcoll/coll_hcoll_rte.c:    req->status = HCOLRTE_REQUEST_ACTIVE;
./mca/coll/hcoll/coll_hcoll_rte.c:    ompi_req->req_complete_cb = NULL;
./mca/coll/hcoll/coll_hcoll_rte.c:    ompi_req->req_status.MPI_ERROR = MPI_SUCCESS;
./mca/coll/hcoll/coll_hcoll_rte.c:    ompi_req->req_state = OMPI_REQUEST_ACTIVE;
./mca/coll/hcoll/coll_hcoll_rte.c:    ompi_req->req_free = request_free;
./mca/coll/hcoll/coll_hcoll_rte.c:    ompi_req->req_type = OMPI_REQUEST_COLL;
./mca/coll/ml/coll_ml_inlines.h:    req->req_state = OMPI_REQUEST_ACTIVE;
./mca/coll/ml/coll_ml_inlines.h:    req->req_status._cancelled = 0;
./mca/coll/ml/coll_ml_inlines.h:    req->req_status.MPI_ERROR = OMPI_SUCCESS;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    if(0 != pmlreq->req_bytes_packed)
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        max_data = iov.iov_len = pmlreq->req_bytes_packed;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        opal_convertor_clone_with_position( &pmlreq->req_base.req_convertor,
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    ftreq->sb.conv_flags = pConv->flags;                                      \
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    ftreq->sb.conv_advance = pConv->fAdvance;                                 \
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    if(req->req_bytes_packed)
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        ftreq->sb.bytes_progressed = 0;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:                         &ftreq->list_item);
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    if(ftreq->sb.bytes_progressed < req->req_bytes_packed)
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        uintptr_t position = ftreq->sb.bytes_progressed;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        max_data = req->req_bytes_packed - ftreq->sb.bytes_progressed;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        iov.iov_base = (IOVBASE_TYPE *) (ftreq->sb.cursor + position);
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        V_OUTPUT_VERBOSE(80, "pessimist:\tsb\tprgress\t%"PRIpclock"\tsize %lu from position %lu", ftreq->reqid, max_data, position);
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        opal_convertor_clone_with_position(&req->req_base.req_convertor,
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        ftreq->sb.bytes_progressed += max_data;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:                         &ftreq->list_item);
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    if((pmlreq->req_base.req_type == MCA_PML_REQUEST_SEND) &&
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:       pmlreq->req_bytes_packed)
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        assert(pmlreq->req_bytes_packed == ftreq->sb.bytes_progressed);
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:            pmlreq->req_bytes_packed +
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        vprotocol_pessimist_sender_based_alloc(pmlreq->req_bytes_packed);
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    ftreq->sb.cursor = mca_vprotocol_pessimist.sender_based.sb_cursor;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        pmlreq->req_bytes_packed;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:        pmlreq->req_bytes_packed;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    sbhdr = (vprotocol_pessimist_sender_based_header_t *) ftreq->sb.cursor;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    sbhdr->size = pmlreq->req_bytes_packed;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    sbhdr->dst = pmlreq->req_base.req_peer;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    sbhdr->tag = pmlreq->req_base.req_tag;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    sbhdr->contextid = pmlreq->req_base.req_comm->c_contextid;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    sbhdr->sequence = pmlreq->req_base.req_sequence;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    ftreq->sb.cursor += sizeof(vprotocol_pessimist_sender_based_header_t);
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.h:    V_OUTPUT_VERBOSE(70, "pessimist:\tsb\tsend\t%"PRIpclock"\tsize %lu (+%lu header)", VPESSIMIST_FTREQ(req)->reqid, (long unsigned)pmlreq->req_bytes_packed, (long unsigned)sizeof(vprotocol_pessimist_sender_based_header_t));
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:    if(MPI_ANY_SOURCE == pmlreq->req_peer)
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:    if(ftreq->event)
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:        V_OUTPUT_VERBOSE(70, "pessimist:\tlog\tmatch\t%"PRIpclock"\tsrc %d\tseq %"PRIpclock, ftreq->reqid, req->req_status.MPI_SOURCE, ((mca_pml_base_request_t *) req)->req_sequence);
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:        event = ftreq->event;
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:        mevent->reqid = ftreq->reqid;
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:        mevent->src = req->req_status.MPI_SOURCE;
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:        ftreq->event = NULL;
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:                if(event->req->req_ompi.req_status.MPI_SOURCE == -1)
./mca/vprotocol/pessimist/vprotocol_pessimist_eventlog.h:                event->req->req_ompi.req_status.MPI_SOURCE;
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    V_OUTPUT_VERBOSE(250, "pessimist:\treq\tnew\treq=%p\tPreq=%p (aligned to %p)", (void *) req, (void *) ftreq, (void *) &ftreq->pml_req_free);
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    req->req_ompi.req_status.MPI_SOURCE = -1; /* no matching made flag */
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    ftreq->pml_req_free = req->req_ompi.req_free;
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    ftreq->event = NULL;
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    ftreq->sb.bytes_progressed = 0;
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    assert(ftreq->pml_req_free == req->req_ompi.req_free); /* detection of aligment issues on different arch */
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    req->req_ompi.req_free = mca_vprotocol_pessimist_request_free;
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    OBJ_CONSTRUCT(& ftreq->list_item, opal_list_item_t);
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    V_OUTPUT_VERBOSE(50, "pessimist:\treq\tfree\t%"PRIpclock"\tpeer %d\ttag %d\tsize %lu", VPESSIMIST_FTREQ(pmlreq)->reqid, pmlreq->req_peer, pmlreq->req_tag, (unsigned long) pmlreq->req_count);
./mca/vprotocol/pessimist/vprotocol_pessimist_request.c:    pmlreq->req_ompi.req_status.MPI_SOURCE = -1; /* no matching made flag */
./mca/vprotocol/pessimist/vprotocol_pessimist_wait.c:            req->req_free = mca_vprotocol_pessimist_request_free;
./mca/vprotocol/pessimist/vprotocol_pessimist_wait.c:                if(req->req_status.MPI_ERROR == MPI_SUCCESS)
./mca/vprotocol/pessimist/vprotocol_pessimist_wait.c:                    ret = req->req_status.MPI_ERROR;
./mca/vprotocol/pessimist/vprotocol_pessimist_wait.c:        req->req_free = mca_vprotocol_pessimist_request_free;
./mca/vprotocol/pessimist/vprotocol_pessimist_wait.c:            if(req->req_status.MPI_ERROR == MPI_SUCCESS)
./mca/vprotocol/pessimist/vprotocol_pessimist_wait.c:                ret = req->req_status.MPI_ERROR;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.c:    pConvertor->flags = ftreq->sb.conv_flags;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.c:    pConvertor->fAdvance = ftreq->sb.conv_advance;
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.c:        MEMCPY((void *) ftreq->sb.cursor, iov[i].iov_base, iov[i].iov_len);
./mca/vprotocol/pessimist/vprotocol_pessimist_sender_based.c:        ftreq->sb.cursor += iov[i].iov_len;
./mca/bcol/ptpcoll/bcol_ptpcoll_module.c:        collreq->requests = (ompi_request_t **)
./mca/bcol/ptpcoll/bcol_ptpcoll_module.c:        collreq->requests = (ompi_request_t **)
./mca/bcol/ptpcoll/bcol_ptpcoll_module.c:    if (NULL == collreq->requests) {
./mca/bcol/ptpcoll/bcol_ptpcoll_component.c:    collreq->requests = NULL;
./mca/bcol/ptpcoll/bcol_ptpcoll_component.c:    if (NULL != collreq->requests) {
./mca/bcol/ptpcoll/bcol_ptpcoll_component.c:        free(collreq->requests);
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    requests = collreq->requests;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:        collreq->need_toserv_extra = 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->tag = tag;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = 0;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:        collreq->need_toserv_extra = 0;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->tag = tag;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = exchange + 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->tag = tag;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = n_exchange;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->need_toserv_extra = 0;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    ompi_request_t **requests = collreq->requests;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    num_reqs = collreq->num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    tag = collreq->tag;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    for (exchange = collreq->exchange; exchange < n_exchange; ++exchange) {
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = exchange + 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    if (collreq->need_toserv_extra)  {  /* EXCHANGE_NODE case */
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = n_exchange;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->need_toserv_extra = 0;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    requests = collreq->requests;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    requests = collreq->requests;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:        collreq->need_toserv_extra = 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:        collreq->extra_partner_rank = my_extra_partner_comm_rank;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->tag = tag;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = 0;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:        collreq->need_toserv_extra = 0;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->tag = tag;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = exchange + 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            assert(collreq->exchange >= 0);
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->tag = tag;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->need_toserv_extra = 0;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = n_exchange;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    num_reqs = collreq->num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    requests = collreq->requests;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    tag = collreq->tag;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    exchange = collreq->exchange;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = num_reqs;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = exchange + 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            assert(collreq->exchange >= 0);
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    if (collreq->need_toserv_extra) {
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:                    collreq->extra_partner_rank, tag,
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->num_reqs = 1;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->need_toserv_extra = 0;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:            collreq->exchange = n_exchange;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    requests = collreq->requests;
./mca/bcol/ptpcoll/bcol_ptpcoll_barrier.c:    requests = collreq->requests;
./mca/bcol/iboffload/bcol_iboffload_collreq.h:    opal_list_remove_item(&coll_fragment->coll_full_req->work_requests,
./mca/bcol/iboffload/bcol_iboffload_component.c:        opal_list_append(&pending_collfrag->coll_full_req->work_requests,
./mca/bcol/iboffload/bcol_iboffload_component.c:        rc = pending_collfrag->coll_full_req->progress_fn
./mca/bcol/iboffload/bcol_iboffload_component.c:     * n_outstanding_frags = coll_req->n_frags_sent - coll_req->n_frag_net_complete; */
./mca/bcol/iboffload/bcol_iboffload_component.c:        opal_list_remove_item(&(cf)->coll_full_req->work_requests,              \
./mca/bcol/iboffload/bcol_iboffload_component.c:        if (&(cf)->coll_full_req->first_collfrag != (cf)) {                     \
./mca/bcol/iboffload/bcol_iboffload_component.c:    if (OPAL_UNLIKELY(opal_list_get_size(&(cf)->coll_full_req->module->collfrag_pending) > 0)) { \
./mca/bcol/iboffload/bcol_iboffload_component.c:        rc = progress_pending_collfrags((cf)->coll_full_req->module);                            \
./mca/bcol/iboffload/bcol_iboffload_component.c:                        coll_frag->alg, (void *)coll_frag, coll_frag->coll_full_req->ml_buffer_index));
./mca/bcol/iboffload/bcol_iboffload_component.c:                    iboffload = coll_frag->coll_full_req->module;
./mca/bcol/iboffload/bcol_iboffload_component.c:                        coll_frag->alg, (void *)coll_frag, coll_frag->coll_full_req->ml_buffer_index));
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    collreq->n_fragments = 0;
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    collreq->n_frag_mpi_complete = 0;
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    collreq->n_frag_net_complete = 0;
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    collreq->user_handle_freed = false;
./mca/bcol/iboffload/bcol_iboffload_collreq.c:        collreq->buffer_info[i].buf = NULL;
./mca/bcol/iboffload/bcol_iboffload_collreq.c:        collreq->buffer_info[i].offset = 0;
./mca/bcol/iboffload/bcol_iboffload_collreq.c:        collreq->buffer_info[i].iboffload_reg = NULL;
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    OBJ_CONSTRUCT(&collreq->work_requests, opal_list_t);
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    OBJ_CONSTRUCT(&collreq->first_collfrag, mca_bcol_iboffload_collfrag_t);
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    OBJ_CONSTRUCT(&collreq->send_convertor, opal_convertor_t);
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    OBJ_CONSTRUCT(&collreq->recv_convertor, opal_convertor_t);
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    OBJ_DESTRUCT(&collreq->work_requests);
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    OBJ_DESTRUCT(&collreq->first_collfrag);
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    OBJ_DESTRUCT(&collreq->send_convertor);
./mca/bcol/iboffload/bcol_iboffload_collreq.c:    OBJ_DESTRUCT(&collreq->recv_convertor);
./mca/bcol/iboffload/bcol_iboffload_module.c:                &collreq->recv_convertor);
./mca/bcol/iboffload/bcol_iboffload_module.c:    if (0 > opal_convertor_unpack(&collreq->recv_convertor,
./mca/bcol/iboffload/bcol_iboffload_module.c:    opal_convertor_cleanup(&collreq->send_convertor);
./mca/bcol/iboffload/bcol_iboffload_module.c:    opal_convertor_cleanup(&collreq->recv_convertor);
./mca/osc/rdma/osc_rdma_accumulate.c:            subreq->internal = true;
./mca/osc/rdma/osc_rdma_accumulate.c:            subreq->parent_request = request;
./mca/osc/rdma/osc_rdma_accumulate.c:                                                          result_addr, 0, &subreq->convertor);
./mca/osc/rdma/osc_rdma_accumulate.c:                opal_convertor_set_position (&subreq->convertor, &result_position);
./mca/osc/rdma/osc_rdma_accumulate.c:                subreq->type = OMPI_OSC_RDMA_TYPE_GET_ACC;
./mca/osc/rdma/osc_rdma_accumulate.c:                subreq->type = OMPI_OSC_RDMA_TYPE_ACC;
./mca/osc/rdma/osc_rdma_request.h:        OMPI_REQUEST_INIT(&req->super, false);                          \
./mca/osc/rdma/osc_rdma_request.h:        req->super.req_mpi_object.win = module->win;                    \
./mca/osc/rdma/osc_rdma_request.h:        req->super.req_state = OMPI_REQUEST_ACTIVE;                     \
./mca/osc/rdma/osc_rdma_request.h:        req->module = rmodule;                                          \
./mca/osc/rdma/osc_rdma_request.h:        req->peer = (rpeer);                                            \
./mca/osc/rdma/osc_rdma_comm.c:                subreq->internal = true;
./mca/osc/rdma/osc_rdma_comm.c:                subreq->type = OMPI_OSC_RDMA_TYPE_RDMA;
./mca/osc/rdma/osc_rdma_comm.c:                subreq->parent_request = request;
./mca/osc/rdma/osc_rdma_comm.c:    subreq->internal = true;
./mca/osc/rdma/osc_rdma_comm.c:    subreq->type = OMPI_OSC_RDMA_TYPE_RDMA;
./mca/osc/rdma/osc_rdma_comm.c:    subreq->parent_request = request;
./mca/osc/pt2pt/osc_pt2pt_request.h:        OMPI_REQUEST_INIT(&req->super, false);                          \
./mca/osc/pt2pt/osc_pt2pt_request.h:        req->super.req_mpi_object.win = win;                            \
./mca/osc/pt2pt/osc_pt2pt_request.h:        req->super.req_complete = false;                                \
./mca/osc/pt2pt/osc_pt2pt_request.h:        req->super.req_state = OMPI_REQUEST_ACTIVE;                     \
./mca/osc/pt2pt/osc_pt2pt_request.h:        req->module = GET_MODULE(win);                                  \
./mca/osc/pt2pt/osc_pt2pt_request.h:        req->internal = false;                                          \
./mca/osc/portals4/osc_portals4_request.h:        OMPI_REQUEST_INIT(&req->super, false);                          \
./mca/osc/portals4/osc_portals4_request.h:        req->super.req_mpi_object.win = win;                            \
./mca/osc/portals4/osc_portals4_request.h:        req->super.req_complete = false;                                \
./mca/osc/portals4/osc_portals4_request.h:        req->super.req_state = OMPI_REQUEST_ACTIVE;                     \
./mca/osc/portals4/osc_portals4_request.h:        req->super.req_status.MPI_ERROR = MPI_SUCCESS;                  \
./mca/osc/portals4/osc_portals4_request.h:        req->ops_expected = 0;                                          \
./mca/osc/portals4/osc_portals4_request.h:        req->ops_committed = 0;                                         \
./mca/osc/portals4/osc_portals4_component.c:            opal_atomic_add_size_t(&req->super.req_status._ucount, ev.mlength);
./mca/osc/portals4/osc_portals4_component.c:            ops = opal_atomic_add_32(&req->ops_committed, 1);
./mca/osc/portals4/osc_portals4_component.c:            if (ops == req->ops_expected) {
./mca/osc/portals4/osc_portals4_component.c:                ompi_request_complete(&req->super, true);
./mca/mtl/psm2/mtl_psm2.c:        mtl_psm2_request->super.ompi_req->req_status.MPI_SOURCE =
./mca/mtl/psm2/mtl_psm2.c:	    mtl_psm2_request->super.ompi_req->req_status.MPI_TAG =
./mca/mtl/psm2/mtl_psm2.c:            mtl_psm2_request->super.ompi_req->req_status._ucount =
./mca/mtl/psm2/mtl_psm2.c:		mtl_psm2_request->super.ompi_req->req_status.MPI_ERROR =
./mca/mtl/psm2/mtl_psm2.c:		mtl_psm2_request->super.ompi_req->req_status.MPI_ERROR =
./mca/mtl/psm2/mtl_psm2.c:		mtl_psm2_request->super.ompi_req->req_status.MPI_ERROR =
./mca/mtl/psm2/mtl_psm2_cancel.c:      mtl_request->ompi_req->req_status._cancelled = true;
./mca/mtl/portals4/mtl_portals4_recv.c:        ptl_request->super.super.ompi_req->req_status.MPI_SOURCE =
./mca/mtl/portals4/mtl_portals4_recv.c:        ptl_request->super.super.ompi_req->req_status.MPI_TAG =
./mca/mtl/portals4/mtl_portals4_recv.c:            ptl_request->super.super.ompi_req->req_status.MPI_ERROR = MPI_ERR_TRUNCATE;
./mca/mtl/portals4/mtl_portals4_recv.c:        ptl_request->super.super.ompi_req->req_status._ucount = ev->mlength;
./mca/mtl/portals4/mtl_portals4_recv.c:                ptl_request->super.super.ompi_req->req_status.MPI_ERROR = ret;
./mca/mtl/portals4/mtl_portals4_recv.c:        ptl_request->super.super.ompi_req->req_status._ucount += ev->mlength;
./mca/mtl/portals4/mtl_portals4_recv.c:                                       ptl_request->super.super.ompi_req->req_status._ucount);
./mca/mtl/portals4/mtl_portals4_recv.c:            ptl_request->super.super.ompi_req->req_status.MPI_ERROR = ret;
./mca/mtl/portals4/mtl_portals4_recv.c:        ptl_request->super.super.ompi_req->req_status.MPI_SOURCE =
./mca/mtl/portals4/mtl_portals4_recv.c:        ptl_request->super.super.ompi_req->req_status.MPI_TAG =
./mca/mtl/portals4/mtl_portals4_recv.c:            ptl_request->super.super.ompi_req->req_status.MPI_ERROR = MPI_ERR_TRUNCATE;
./mca/mtl/portals4/mtl_portals4_recv.c:            ptl_request->super.super.ompi_req->req_status._ucount = ev->mlength;
./mca/mtl/portals4/mtl_portals4_recv.c:            ptl_request->super.super.ompi_req->req_status._ucount = 0;
./mca/mtl/portals4/mtl_portals4_recv.c:    ptl_request->super.super.ompi_req->req_status.MPI_ERROR =
./mca/mtl/portals4/mtl_portals4_recv.c:    ptl_request->super.super.ompi_req->req_status.MPI_ERROR = OMPI_SUCCESS;
./mca/mtl/portals4/mtl_portals4_recv.c:    ptl_request->super.super.ompi_req->req_status.MPI_ERROR = OMPI_SUCCESS;
./mca/mtl/portals4/mtl_portals4_cancel.c:            if (PTL_INVALID_HANDLE != recvreq->me_h) {
./mca/mtl/portals4/mtl_portals4_cancel.c:                ret = PtlMEUnlink(recvreq->me_h);
./mca/mtl/portals4/mtl_portals4_cancel.c:                    recvreq->super.super.ompi_req->req_status._cancelled = true;
./mca/mtl/portals4/mtl_portals4_cancel.c:                    recvreq->super.super.completion_callback(&recvreq->super.super);
./mca/mtl/portals4/mtl_portals4_send.c:        ptl_request->super.super.ompi_req->req_status.MPI_ERROR = ret;
./mca/mtl/mxm/mtl_mxm_recv.c:    struct ompi_request_t *ompi_req = req->super.ompi_req;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req_t *mxm_recv_req = &req->mxm.recv;
./mca/mtl/mxm/mtl_mxm_recv.c:    ompi_mtl_mxm_to_mpi_status(mxm_recv_req->base.error, &ompi_req->req_status);
./mca/mtl/mxm/mtl_mxm_recv.c:    ompi_req->req_status.MPI_TAG    = mxm_recv_req->completion.sender_tag;
./mca/mtl/mxm/mtl_mxm_recv.c:    ompi_req->req_status.MPI_SOURCE = mxm_recv_req->completion.sender_imm;
./mca/mtl/mxm/mtl_mxm_recv.c:    ompi_req->req_status._ucount    = mxm_recv_req->completion.actual_len;
./mca/mtl/mxm/mtl_mxm_recv.c:    req->super.completion_callback(&req->super);
./mca/mtl/mxm/mtl_mxm_recv.c:        mxm_recv_req->base.data_type = MXM_REQ_DATA_BUFFER;
./mca/mtl/mxm/mtl_mxm_recv.c:        mxm_recv_req->base.data_type = MXM_REQ_DATA_STREAM;
./mca/mtl/mxm/mtl_mxm_recv.c:        mxm_recv_req->base.data.stream.length = *buffer_len;
./mca/mtl/mxm/mtl_mxm_recv.c:        mxm_recv_req->base.data.stream.cb = ompi_mtl_mxm_stream_unpack;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.data_type = MXM_REQ_DATA_BUFFER;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.data.buffer.ptr     = *buffer;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.data.buffer.length  = *buffer_len;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.state               = MXM_REQ_NEW;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.flags               = 0;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.data.buffer.memh    = MXM_INVALID_MEM_HANDLE;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.context             = mtl_mxm_request;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.completed_cb        = ompi_mtl_mxm_recv_completion_cb;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->tag       = msgp->tag;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->tag_mask  = msgp->tag_mask;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.mq   = msgp->mq;
./mca/mtl/mxm/mtl_mxm_recv.c:    mxm_recv_req->base.conn = msgp->conn;
./mca/mtl/mxm/mtl_mxm_types.h:    req->base.mq    = (mxm_mq_h)comm->c_pml_comm;
./mca/mtl/mxm/mtl_mxm_types.h:    req->base.conn  = (src == MPI_ANY_SOURCE)
./mca/mtl/mxm/mtl_mxm_types.h:        req->tag      = 0;
./mca/mtl/mxm/mtl_mxm_types.h:        req->tag_mask = 0x80000000U; /* MPI_ANY_TAG should not match against negative tags */
./mca/mtl/mxm/mtl_mxm_types.h:        req->tag      = tag;
./mca/mtl/mxm/mtl_mxm_types.h:        req->tag_mask = 0xffffffffU;
./mca/mtl/mxm/mtl_mxm_send.c:    size_t *buffer_len = &mxm_send_req->base.data.buffer.length;
./mca/mtl/mxm/mtl_mxm_send.c:	    mxm_send_req->base.data.buffer.ptr = convertor->pBaseBuf;
./mca/mtl/mxm/mtl_mxm_send.c:	    mxm_send_req->base.data.buffer.length = convertor->local_size;
./mca/mtl/mxm/mtl_mxm_send.c:	    mxm_send_req->base.data_type = MXM_REQ_DATA_BUFFER;
./mca/mtl/mxm/mtl_mxm_send.c:        mxm_send_req->base.data.buffer.ptr = NULL;
./mca/mtl/mxm/mtl_mxm_send.c:        mxm_send_req->base.data_type = MXM_REQ_DATA_BUFFER;
./mca/mtl/mxm/mtl_mxm_send.c:        mxm_send_req->base.data_type = MXM_REQ_DATA_STREAM;
./mca/mtl/mxm/mtl_mxm_send.c:        mxm_send_req->base.data.stream.length = *buffer_len;
./mca/mtl/mxm/mtl_mxm_send.c:        mxm_send_req->base.data.stream.cb = stream_cb;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.data_type = MXM_REQ_DATA_BUFFER;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.data.buffer.ptr = iov.iov_base;
./mca/mtl/mxm/mtl_mxm_send.c:                               &mtl_mxm_request->super.ompi_req->req_status);
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.state               = MXM_REQ_NEW;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.mq                  = ompi_mtl_mxm_mq_lookup(comm);
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.conn                = ompi_mtl_mxm_conn_lookup(comm, dest);
./mca/mtl/mxm/mtl_mxm_send.c:    mtl_mxm_request->buf    = mxm_send_req->base.data.buffer.ptr;
./mca/mtl/mxm/mtl_mxm_send.c:    mtl_mxm_request->length = mxm_send_req->base.data.buffer.length;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.data.buffer.memh    = MXM_INVALID_MEM_HANDLE;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.context             = mtl_mxm_request;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.completed_cb        = ompi_mtl_mxm_send_completion_cb;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->base.flags               = 0;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->opcode                   = MXM_REQ_OP_SEND;
./mca/mtl/mxm/mtl_mxm_send.c:        mxm_send_req->base.flags           |= MXM_REQ_FLAG_SEND_SYNC;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->flags                    = MXM_REQ_SEND_FLAG_REENTRANT;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->flags                    = 0;
./mca/mtl/mxm/mtl_mxm_send.c:        mxm_send_req->opcode               = MXM_REQ_OP_SEND_SYNC;
./mca/mtl/mxm/mtl_mxm_send.c:        mxm_send_req->opcode               = MXM_REQ_OP_SEND;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->op.send.tag              = tag;
./mca/mtl/mxm/mtl_mxm_send.c:    mxm_send_req->op.send.imm_data         = ompi_comm_rank(comm);
./mca/mtl/ofi/mtl_ofi.h:                ret = ofi_req->event_callback(&wc, ofi_req);
./mca/mtl/ofi/mtl_ofi.h:            ret = ofi_req->error_callback(&error, ofi_req);
./mca/mtl/ofi/mtl_ofi.h:    assert(ofi_req->completion_count > 0);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->completion_count--;
./mca/mtl/ofi/mtl_ofi.h:            ofi_req->status.MPI_ERROR = MPI_ERR_TRUNCATE;
./mca/mtl/ofi/mtl_ofi.h:            ofi_req->status.MPI_ERROR = MPI_ERR_INTERN;
./mca/mtl/ofi/mtl_ofi.h:    return ofi_req->event_callback(NULL, ofi_req);
./mca/mtl/ofi/mtl_ofi.h:    ompi_mtl_ofi_request_t *parent_req = ofi_req->parent;
./mca/mtl/ofi/mtl_ofi.h:    parent_req->event_callback(NULL, parent_req);
./mca/mtl/ofi/mtl_ofi.h:    ompi_mtl_ofi_request_t *parent_req = ofi_req->parent;
./mca/mtl/ofi/mtl_ofi.h:    parent_req->status.MPI_ERROR = MPI_ERR_INTERN;
./mca/mtl/ofi/mtl_ofi.h:    return parent_req->error_callback(error, parent_req);
./mca/mtl/ofi/mtl_ofi.h:    assert(ofi_req->completion_count > 0);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->completion_count--;
./mca/mtl/ofi/mtl_ofi.h:    if (0 == ofi_req->completion_count) {
./mca/mtl/ofi/mtl_ofi.h:        if (OPAL_UNLIKELY(NULL != ofi_req->buffer)) {
./mca/mtl/ofi/mtl_ofi.h:            free(ofi_req->buffer);
./mca/mtl/ofi/mtl_ofi.h:            ofi_req->buffer = NULL;
./mca/mtl/ofi/mtl_ofi.h:        ofi_req->super.ompi_req->req_status.MPI_ERROR =
./mca/mtl/ofi/mtl_ofi.h:            ofi_req->status.MPI_ERROR;
./mca/mtl/ofi/mtl_ofi.h:        ofi_req->super.completion_callback(&ofi_req->super);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->buffer = (free_after) ? start : NULL;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->length = length;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->status.MPI_ERROR = OMPI_SUCCESS;
./mca/mtl/ofi/mtl_ofi.h:        ack_req->parent = ofi_req;
./mca/mtl/ofi/mtl_ofi.h:        ack_req->event_callback = ompi_mtl_ofi_send_ack_callback;
./mca/mtl/ofi/mtl_ofi.h:        ack_req->error_callback = ompi_mtl_ofi_send_ack_error_callback;
./mca/mtl/ofi/mtl_ofi.h:        ofi_req->completion_count = 2;
./mca/mtl/ofi/mtl_ofi.h:                                          (void *) &ack_req->ctx));
./mca/mtl/ofi/mtl_ofi.h:        ofi_req->completion_count = 1;
./mca/mtl/ofi/mtl_ofi.h:                fi_cancel((fid_t)ompi_mtl_ofi.ep, &ack_req->ctx);
./mca/mtl/ofi/mtl_ofi.h:        ofi_req->event_callback(NULL,ofi_req);
./mca/mtl/ofi/mtl_ofi.h:                                          (void *) &ofi_req->ctx));
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->event_callback = ompi_mtl_ofi_isend_callback;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->error_callback = ompi_mtl_ofi_send_error_callback;
./mca/mtl/ofi/mtl_ofi.h:    if (OPAL_UNLIKELY(OMPI_SUCCESS != ret && NULL != ofi_req->buffer)) {
./mca/mtl/ofi/mtl_ofi.h:        free(ofi_req->buffer);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->super.completion_callback(&ofi_req->super);
./mca/mtl/ofi/mtl_ofi.h:    assert(ofi_req->super.ompi_req);
./mca/mtl/ofi/mtl_ofi.h:    status = &ofi_req->super.ompi_req->req_status;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->req_started = true;
./mca/mtl/ofi/mtl_ofi.h:    if (OPAL_UNLIKELY(wc->len > ofi_req->length)) {
./mca/mtl/ofi/mtl_ofi.h:                            wc->len, ofi_req->length);
./mca/mtl/ofi/mtl_ofi.h:    if (OPAL_UNLIKELY(ofi_req->buffer)) {
./mca/mtl/ofi/mtl_ofi.h:        ompi_ret = ompi_mtl_datatype_unpack(ofi_req->convertor,
./mca/mtl/ofi/mtl_ofi.h:                                            ofi_req->buffer,
./mca/mtl/ofi/mtl_ofi.h:        ofi_req->event_callback = ompi_mtl_ofi_sync_recv_callback;
./mca/mtl/ofi/mtl_ofi.h:        if (ompi_mtl_ofi.any_addr == ofi_req->remote_addr) {
./mca/mtl/ofi/mtl_ofi.h:            ompi_proc = ompi_comm_peer_lookup(ofi_req->comm, src);
./mca/mtl/ofi/mtl_ofi.h:            endpoint = ompi_mtl_ofi_get_endpoint(ofi_req->mtl, ompi_proc);
./mca/mtl/ofi/mtl_ofi.h:            ofi_req->remote_addr = endpoint->peer_fiaddr;
./mca/mtl/ofi/mtl_ofi.h:                                          ofi_req->remote_addr,
./mca/mtl/ofi/mtl_ofi.h:                                          (void *) &ofi_req->ctx));
./mca/mtl/ofi/mtl_ofi.h:        ofi_req->super.completion_callback(&ofi_req->super);
./mca/mtl/ofi/mtl_ofi.h:    assert(ofi_req->super.ompi_req);
./mca/mtl/ofi/mtl_ofi.h:    status = &ofi_req->super.ompi_req->req_status;
./mca/mtl/ofi/mtl_ofi.h:    status->MPI_TAG = MTL_OFI_GET_TAG(ofi_req->match_bits);
./mca/mtl/ofi/mtl_ofi.h:    status->MPI_SOURCE = MTL_OFI_GET_SOURCE(ofi_req->match_bits);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->super.completion_callback(&ofi_req->super);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->type = OMPI_MTL_OFI_RECV;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->event_callback = ompi_mtl_ofi_recv_callback;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->error_callback = ompi_mtl_ofi_recv_error_callback;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->comm = comm;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->buffer = (free_after) ? start : NULL;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->length = length;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->convertor = convertor;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->req_started = false;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->status.MPI_ERROR = OMPI_SUCCESS;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->remote_addr = remote_addr;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->match_bits = match_bits;
./mca/mtl/ofi/mtl_ofi.h:                                      (void *)&ofi_req->ctx));
./mca/mtl/ofi/mtl_ofi.h:        if (NULL != ofi_req->buffer) {
./mca/mtl/ofi/mtl_ofi.h:            free(ofi_req->buffer);
./mca/mtl/ofi/mtl_ofi.h:    struct mca_mtl_request_t *mrecv_req = ofi_req->mrecv_req;
./mca/mtl/ofi/mtl_ofi.h:    ompi_status_public_t *status = &mrecv_req->ompi_req->req_status;
./mca/mtl/ofi/mtl_ofi.h:    mrecv_req->completion_callback(mrecv_req);
./mca/mtl/ofi/mtl_ofi.h:    struct mca_mtl_request_t *mrecv_req = ofi_req->mrecv_req;
./mca/mtl/ofi/mtl_ofi.h:    ompi_status_public_t *status = &mrecv_req->ompi_req->req_status;
./mca/mtl/ofi/mtl_ofi.h:    status->MPI_TAG = MTL_OFI_GET_TAG(ofi_req->match_bits);
./mca/mtl/ofi/mtl_ofi.h:    status->MPI_SOURCE = MTL_OFI_GET_SOURCE(ofi_req->match_bits);
./mca/mtl/ofi/mtl_ofi.h:    mrecv_req->completion_callback(mrecv_req);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->type = OMPI_MTL_OFI_RECV;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->event_callback = ompi_mtl_ofi_mrecv_callback;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->error_callback = ompi_mtl_ofi_mrecv_error_callback;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->buffer = (free_after) ? start : NULL;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->length = length;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->convertor = convertor;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->status.MPI_ERROR = OMPI_SUCCESS;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->mrecv_req = mtl_request;
./mca/mtl/ofi/mtl_ofi.h:    msg.context = (void *)&ofi_req->ctx;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->match_state = 1;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->match_bits = wc->tag;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->status.MPI_SOURCE = MTL_OFI_GET_SOURCE(wc->tag);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->status.MPI_TAG = MTL_OFI_GET_TAG(wc->tag);
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->status.MPI_ERROR = MPI_SUCCESS;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->status._ucount = wc->len;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->completion_count--;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->status.MPI_ERROR = MPI_ERR_INTERN;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->completion_count--;
./mca/mtl/ofi/mtl_ofi.h:    msg.context = (void *)&ofi_req->ctx;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->type = OMPI_MTL_OFI_PROBE;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->event_callback = ompi_mtl_ofi_probe_callback;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->error_callback = ompi_mtl_ofi_probe_error_callback;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->completion_count = 1;
./mca/mtl/ofi/mtl_ofi.h:    ofi_req->match_state = 0;
./mca/mtl/ofi/mtl_ofi.h:    while (0 < ofi_req->completion_count) {
./mca/mtl/ofi/mtl_ofi.h:    *matched = ofi_req->match_state;
./mca/mtl/ofi/mtl_ofi.h:            *status = ofi_req->status;
./mca/mtl/ofi/mtl_ofi.h:        (*message)->peer = ofi_req->status.MPI_SOURCE;
./mca/mtl/ofi/mtl_ofi.h:        (*message)->count = ofi_req->status._ucount;
./mca/mtl/ofi/mtl_ofi.h:    switch (ofi_req->type) {
./mca/mtl/ofi/mtl_ofi.h:            if (!ofi_req->req_started) {
./mca/mtl/ofi/mtl_ofi.h:                ret = fi_cancel((fid_t)ompi_mtl_ofi.ep, &ofi_req->ctx);
./mca/mtl/ofi/mtl_ofi.h:                    while (!ofi_req->super.ompi_req->req_status._cancelled) {
./mca/mtl/ofi/mtl_ofi.h:                    ofi_req->super.ompi_req->req_status._cancelled = false;
./mca/mtl/psm/mtl_psm.c:	    mtl_psm_request->super.ompi_req->req_status.MPI_SOURCE =
./mca/mtl/psm/mtl_psm.c:	    mtl_psm_request->super.ompi_req->req_status.MPI_TAG =
./mca/mtl/psm/mtl_psm.c:        mtl_psm_request->super.ompi_req->req_status._ucount =
./mca/mtl/psm/mtl_psm.c:		mtl_psm_request->super.ompi_req->req_status.MPI_ERROR =
./mca/mtl/psm/mtl_psm.c:		mtl_psm_request->super.ompi_req->req_status.MPI_ERROR =
./mca/mtl/psm/mtl_psm.c:		mtl_psm_request->super.ompi_req->req_status.MPI_ERROR =
./mca/mtl/psm/mtl_psm_cancel.c:      mtl_request->ompi_req->req_status._cancelled = true;
./mca/fbtl/posix/fbtl_posix.c:    mca_fbtl_posix_request_data_t *data=(mca_fbtl_posix_request_data_t *)req->req_data;
./mca/fbtl/posix/fbtl_posix.c:		req->req_ompi.req_status.MPI_ERROR = OMPI_ERROR;
./mca/fbtl/posix/fbtl_posix.c:		req->req_ompi.req_status._ucount = data->aio_total_len;
./mca/fbtl/posix/fbtl_posix.c:	req->req_ompi.req_status.MPI_ERROR = OMPI_SUCCESS;
./mca/fbtl/posix/fbtl_posix.c:	req->req_ompi.req_status._ucount = data->aio_total_len;
./mca/fbtl/posix/fbtl_posix.c:    mca_fbtl_posix_request_data_t *data=(mca_fbtl_posix_request_data_t *)req->req_data;
./mca/fbtl/posix/fbtl_posix.c:	req->req_data = NULL;
./mca/fbtl/posix/fbtl_posix_ipreadv.c:    req->req_data = data;
./mca/fbtl/posix/fbtl_posix_ipreadv.c:    req->req_progress_fn = mca_fbtl_posix_progress;
./mca/fbtl/posix/fbtl_posix_ipreadv.c:    req->req_free_fn     = mca_fbtl_posix_request_free;
./mca/fbtl/posix/fbtl_posix_ipwritev.c:    req->req_data = data;
./mca/fbtl/posix/fbtl_posix_ipwritev.c:    req->req_progress_fn = mca_fbtl_posix_progress;
./mca/fbtl/posix/fbtl_posix_ipwritev.c:    req->req_free_fn     = mca_fbtl_posix_request_free;
./mca/io/ompio/io_ompio_request.c:    if ( NULL != ompio_req->req_free_fn ) {
./mca/io/ompio/io_ompio_request.c:        ompio_req->req_free_fn (ompio_req );
./mca/io/ompio/io_ompio_request.c:    opal_list_remove_item (&mca_io_ompio_pending_requests, &ompio_req->req_item);
./mca/io/ompio/io_ompio_request.c:    OMPI_REQUEST_INIT (&(req->req_ompi), false );
./mca/io/ompio/io_ompio_request.c:    req->req_ompi.req_free   = mca_io_ompio_request_free;
./mca/io/ompio/io_ompio_request.c:    req->req_ompi.req_cancel = mca_io_ompio_request_cancel;
./mca/io/ompio/io_ompio_request.c:    req->req_ompi.req_type   = OMPI_REQUEST_IO;
./mca/io/ompio/io_ompio_request.c:    req->req_data            = NULL;
./mca/io/ompio/io_ompio_request.c:    req->req_progress_fn     = NULL;
./mca/io/ompio/io_ompio_request.c:    req->req_free_fn         = NULL;
./mca/io/ompio/io_ompio_request.c:    OBJ_CONSTRUCT(&req->req_item, opal_list_item_t);
./mca/io/ompio/io_ompio_request.c:    opal_list_append (&mca_io_ompio_pending_requests, &req->req_item);
./mca/io/ompio/io_ompio_request.c:    OMPI_REQUEST_FINI ( &(req->req_ompi));
./mca/io/ompio/io_ompio_request.c:    OBJ_DESTRUCT (&req->req_item);
./mca/io/ompio/io_ompio_request.c:    if ( NULL != req->req_data ) {
./mca/io/ompio/io_ompio_request.c:        free (req->req_data);
./mca/io/ompio/io_ompio_request.c:        if( REQUEST_COMPLETE(&req->req_ompi) ) {
./mca/io/ompio/io_ompio_request.c:        if ( NULL != req->req_progress_fn ) {
./mca/io/ompio/io_ompio_request.c:            if ( req->req_progress_fn(req) ) {
./mca/io/ompio/io_ompio_request.c:                ompi_request_complete (&req->req_ompi, true);
./mca/io/base/io_base_request.c:    req->super.req_type = OMPI_REQUEST_IO;
./mca/io/base/io_base_request.c:    req->free_called = false;
./mca/io/romio314/romio/adio/ad_nfs/ad_nfs_iwrite.c:    aio_req->aiocbp = aiocbp;
./mca/io/romio314/romio/adio/ad_nfs/ad_nfs_iwrite.c:    memcpy(&(aio_req->req), request, sizeof(MPI_Request));
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:    ret = PVFS_Request_contiguous(len, PVFS_BYTE, &(aio_req->mem_req));
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:    ret = PVFS_Request_contiguous(len, PVFS_BYTE, &(aio_req->file_req));
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:	ret = PVFS_isys_read(pvfs_fs->object_ref, aio_req->file_req, offset,
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:		buf, aio_req->mem_req, &(pvfs_fs->credentials),
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:		&(aio_req->resp_io), &(aio_req->op_id), NULL);
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:	ret = PVFS_isys_write(pvfs_fs->object_ref, aio_req->file_req, offset,
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:		buf, aio_req->mem_req, &(pvfs_fs->credentials),
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:		&(aio_req->resp_io), &(aio_req->op_id), NULL);
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:	memcpy(&(aio_req->req), request, sizeof(*request));
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:    ret = PVFS_sys_wait(aio_req->op_id, "ADIOI_PVFS2_AIO_Contig", &error);
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:    PVFS_Request_free(&(aio_req->mem_req));
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:    PVFS_Request_free(&(aio_req->file_req));
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:    ret = PVFS_sys_wait(aio_req->op_id, "ADIOI_PVFS2_aio_poll_fn", &error);
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:	aio_req->nbytes = aio_req->resp_io.total_completed;
./mca/io/romio314/romio/adio/ad_pvfs2/ad_pvfs2_aio.c:	MPI_Grequest_complete(aio_req->req);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    if(!GetOverlappedResult( aio_req->fd, aio_req->lpOvl,
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:                            &(aio_req->nbytes), FALSE)){
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:        mpi_errno = MPI_Grequest_complete(aio_req->req);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:	MPI_Status_set_elements(status, MPI_BYTE, aio_req->nbytes);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    CloseHandle(aio_req->lpOvl->hEvent);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    ADIOI_Free(aio_req->lpOvl);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    aio_req->lpOvl = (LPOVERLAPPED ) ADIOI_Calloc(sizeof(OVERLAPPED), 1);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    if (aio_req->lpOvl == NULL)
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    aio_req->lpOvl->hEvent = CreateEvent(NULL, TRUE, FALSE, NULL);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    if (aio_req->lpOvl->hEvent == NULL)
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    ADIOI_Free(aio_req->lpOvl);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    aio_req->lpOvl->Offset = DWORDLOW(offset);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    aio_req->lpOvl->OffsetHigh = DWORDHIGH(offset);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    aio_req->fd = fd_sys;
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:	ret_val = WriteFile(fd_sys, buf, len, &dwNumWritten, aio_req->lpOvl);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:	ret_val = ReadFile(fd_sys, buf, len, &dwNumRead, aio_req->lpOvl);
./mca/io/romio314/romio/adio/ad_ntfs/ad_ntfs_iwrite.c:    memcpy(&(aio_req->req), request, sizeof(MPI_Request));
./mca/io/romio314/romio/adio/common/ad_iwrite.c:    aio_req->aiocbp = aiocbp;
./mca/io/romio314/romio/adio/common/ad_iwrite.c:    memcpy(&(aio_req->req), request, sizeof(MPI_Request));
./mca/io/romio314/romio/adio/common/ad_iwrite.c:    errno = aio_error(aio_req->aiocbp);
./mca/io/romio314/romio/adio/common/ad_iwrite.c:	    ssize_t n = aio_return(aio_req->aiocbp);
./mca/io/romio314/romio/adio/common/ad_iwrite.c:	    aio_req->nbytes = n;
./mca/io/romio314/romio/adio/common/ad_iwrite.c:	    errcode = MPI_Grequest_complete(aio_req->req);
./mca/io/romio314/romio/adio/common/ad_iwrite.c:	if (aio_req->aiocbp != NULL)
./mca/io/romio314/romio/adio/common/ad_iwrite.c:		ADIOI_Free(aio_req->aiocbp);
./mca/io/romio314/romio/adio/common/ad_iwrite.c:	MPI_Status_set_elements_x(status, MPI_BYTE, aio_req->nbytes);
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    ompi_datatype_type_size(breq->req_datatype, &tmp_ddt_size);
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    if( OMPI_SUCCESS != (ret = find_peer_in_comm(breq->req_comm,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                 breq->req_peer,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_tag,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_peer,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                             breq->req_peer, src, breq->req_comm->c_contextid));
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                             breq->req_peer, src, breq->req_comm->c_contextid));
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    ompi_datatype_type_size(breq->req_datatype, &tmp_ddt_size);
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    if( 0 <= breq->req_peer ) {
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        if( OMPI_SUCCESS != (ret = find_peer_in_comm(breq->req_comm,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                     breq->req_peer,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_tag,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_peer,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_tag,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    ompi_datatype_type_size(breq->req_datatype, &tmp_ddt_size);
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    if( 0 <= breq->req_peer ) {
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        if( OMPI_SUCCESS != (ret = find_peer_in_comm(breq->req_comm,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                     breq->req_peer,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_tag,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_peer,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_tag,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                             breq->req_peer, src, breq->req_comm->c_contextid));
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                    breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_count,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                                        breq->req_comm->c_contextid,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                             breq->req_peer, src, breq->req_comm->c_contextid));
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:            if(breq->req_type == MCA_PML_REQUEST_SEND ) {
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:            ompi_datatype_type_size(breq->req_datatype, &tmp_ddt_size);
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:            if( breq->req_type == MCA_PML_REQUEST_RECV ) {
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:            ompi_datatype_type_size(breq->req_datatype, &tmp_ddt_size);
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:            if (breq->req_type == MCA_PML_REQUEST_RECV) {
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    if( (breq->req_type   != MCA_PML_REQUEST_SEND &&
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:         breq->req_type   != MCA_PML_REQUEST_RECV ) || /* JJH YYY -- req_state = OMPI_REQUEST_INACTIVE ??? */
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    src = breq->req_peer;
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    tag = breq->req_tag;
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    ompi_datatype_type_size(breq->req_datatype, &tmp_ddt_size);
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        if( OMPI_SUCCESS != (ret = find_peer_in_comm(breq->req_comm, request->req_status.MPI_SOURCE, &peer_ref) ) ){
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        if( OMPI_SUCCESS != (ret = find_peer_in_comm(breq->req_comm, src,  &peer_ref) ) ){
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    if(breq->req_type == MCA_PML_REQUEST_SEND ) {
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:    else if(breq->req_type == MCA_PML_REQUEST_RECV) {
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        else if( loc_breq->req_sequence == breq->req_sequence ) {
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                 (int)loc_breq->req_sequence,
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:                                 (int)breq->req_sequence));
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        status->MPI_TAG    = req->req_status.MPI_TAG;
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        status->MPI_SOURCE = req->req_status.MPI_SOURCE;
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        status->_cancelled = req->req_status._cancelled;
./mca/crcp/bkmrk/crcp_bkmrk_pml.c:        status->_ucount    = req->req_status._ucount;
